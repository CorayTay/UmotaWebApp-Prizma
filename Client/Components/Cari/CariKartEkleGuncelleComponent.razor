<div class="container">
    <EditForm Model="cariModel" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (loadingCompleted == false)
        {
            <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
        }

        <div class="mt-5">

            <div class="form">

                <MudTabs  Rounded="true" Centered="false" Class="my-6">
                    <MudTabPanel Icon="@Icons.Material.Filled.AddBusiness" Text="Cari Bilgileri" BadgeColor="Color.Error">

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>Kodu</label>
                                    <InputText @bind-Value="cariModel.Kodu" class="form-control" disabled />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>Ünvanı</label>
                                    <InputText @bind-Value="cariModel.Adi" class="form-control" />
                                </div>
                                <div class="col-md-6">
                                    <label>Tabela Ünvanı</label>
                                    <InputText @bind-Value="cariModel.Adi2" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-3">
                                    <label>Şahıs Şirketi mi?</label>
                                    <InputSelect @bind-Value="cariModel.Sahismi" class="form-control">
                                        <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                        <option value="0">Hayır</option>
                                        <option value="1">Evet</option>
                                    </InputSelect>
                                </div>
                                <div class="col-md-3">
                                    <label>Vergi/TCK No</label>
                                    <InputText @bind-Value="cariModel.Vdno" class="form-control" />
                                </div>
                                <div class="col-md-3">
                                    <label>Vergi Dairesi</label>
                                    <InputText @bind-Value="cariModel.Vdadi" class="form-control" />
                                </div>
                                <div class="col-md-3">
                                    <label>Sektör</label>
                                    <InputSelect @bind-Value="cariModel.Ozelkod3" class="form-control">
                                        <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                        @if (SektorListesi != null)
                                        {
                                            @foreach (var item in SektorListesi)
                                            {
                                                <option value="@item.SPECODE">@item.DEFINITION_</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                    </MudTabPanel>


                    <MudTabPanel Icon="@Icons.Material.Filled.Phone" Text="İletişim Bilgileri" BadgeColor="Color.Error">

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>Adres (1.Satır)</label>
                                    <InputText @bind-Value="cariModel.Adres1" class="form-control" />
                                </div>
                                <div class="col-md-6">
                                    <label>Adres (2.Satır)</label>
                                    <InputText @bind-Value="cariModel.Adres1" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-4">
                                    <label>Ülke</label>
                                    <InputText @bind-Value="cariModel.Ulke" class="form-control" />
                                </div>
                                <div class="col-md-4">
                                    <label>Şehir</label>
                                    <InputText @bind-Value="cariModel.Il" class="form-control" />
                                </div>
                                <div class="col-md-4">
                                    <label>İlçe</label>
                                    <InputText @bind-Value="cariModel.Ilce" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-4">
                                    <label>Telefon 1</label>
                                    <InputText @bind-Value="cariModel.Tel1" class="form-control" />
                                </div>
                                <div class="col-md-4">
                                    <label>Telefon 2</label>
                                    <InputText @bind-Value="cariModel.Tel2" class="form-control" />
                                </div>
                                <div class="col-md-4">
                                    <label>Fax</label>
                                    <InputText @bind-Value="cariModel.Faks" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>E-Posta</label>
                                    <InputText @bind-Value="cariModel.Mail" class="form-control" type="email" />
                                </div>
                                <div class="col-md-6">
                                    <label>Web Sitesi</label>
                                    <InputText @bind-Value="cariModel.Web" class="form-control" />
                                </div>
                            </div>

                        </div>

                    </MudTabPanel>
                </MudTabs>





                <div class="form-group">
                    <MudButton Disabled="@_processing" OnClick="ValidSubmit" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Kaydediliyor...</MudText>
                        }
                        else
                        {
                            <MudText>Kaydet</MudText>
                        }
                    </MudButton>
                    <CancelButtonComponent Caption="Vazgeç" OnClick="goBackCariList" />
                </div>
            </div>
        </div>

    </EditForm>

</div>



@code
{
    [Parameter]
    public int? CariKartRef { get; set; }
    [Parameter]
    public int? modalForm { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    CariKartDto cariModel = new CariKartDto();
    public List<SpeCodesDto> SektorListesi { get; set; }

    private bool isUpdate = false;
    private bool loadingCompleted = false;
    private bool _processing = false;

    public async Task CariKartGetir()
    {
        try
        {
            if (!CariKartRef.HasValue)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            cariModel = await httpClient.GetServiceResponseAsync<CariKartDto>(UrlHelper.CariKartGetirLogRef + "?logref=" + CariKartRef + "&firmaId=" + selectedFirmaDonem.firma_no.Value);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task Kaydet()
    {
        try
        {
            SubmitValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            _processing = true;
            if (!isUpdate)
            {
                var reff = await httpClient.GetServiceResponseAsync<int>(UrlHelper.RefNoAl + "?tablename=cari_kart&firmaId=" + selectedFirmaDonem.firma_no.Value);

                cariModel.Logref = reff * -1;
                cariModel.Status = 0;
                cariModel.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                cariModel.Insdate = DateTime.Now;
                cariModel.Active = 0;
                cariModel.Logoref = 0;
                await NoUret();
            }
            else
            {
                cariModel.Status = 1;
                cariModel.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                cariModel.Upddate = DateTime.Now;
            }

            var request = new CariKartRequestDto();
            request.CariKart = cariModel;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            if (isUpdate)
            {
                cariModel = await httpClient.PostGetServiceResponseAsync<CariKartDto, CariKartRequestDto>(UrlHelper.CariKartGuncelle, request);
                Snackbar.Add("Cari kart güncellendi", severity: Severity.Success);
            }
            else
            {
                cariModel = await httpClient.PostGetServiceResponseAsync<CariKartDto, CariKartRequestDto>(UrlHelper.CariKartKaydet, request);
                Snackbar.Add("Cari kart eklendi", severity: Severity.Success);
            }

            if (modalForm.HasValue)
                await ModalInstance.CloseAsync(ModalResult.Ok<CariKartDto>(cariModel));
            else
                await goBackCariList();
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
        finally
        {
            _processing = false;
        }
    }

    public async Task ValidSubmit()
    {
        await Kaydet();
    }

    public async Task goBackCariList()
    {
        if (modalForm.HasValue)
            await ModalInstance.CloseAsync();
        else
            navigation.NavigateTo("/cari_kartf");
    }

    protected override Task OnParametersSetAsync()
    {
        if (CariKartRef.HasValue)
            isUpdate = true;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        if (CariKartRef.HasValue)
            isUpdate = true;

        if (isUpdate)
            await CariKartGetir();
        else
            await NoUret();

        await SektorListesiGetir();
        loadingCompleted = true;
    }

    public async Task NoUret()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=cari_kart&keyField=kodu&firmaId=" + selectedFirmaDonem.firma_no.Value);

            cariModel.Kodu = result;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public void SubmitValidation()
    {
        var err = new List<string>();

        if (string.IsNullOrWhiteSpace(cariModel.Adi))
            err.Add("Ünvan boş geçilemez");

        if (cariModel.Sahismi == null || cariModel.Sahismi == -1)
            err.Add("Şahıs Şirketi/Tüzel Kişilik bilgisini seçiniz");

        if (cariModel.Sahismi == 0 && cariModel.Vdno.Length > 0 && cariModel.Vdno.Length < 10)
            err.Add("Vergi No 10 hane girilmelidir");

        if (cariModel.Sahismi == 1 && cariModel.Vdno.Length > 0 && cariModel.Vdno.Length < 11)
            err.Add("TCK No 11 hane girilmelidir");

        if (string.IsNullOrWhiteSpace(cariModel.Ozelkod3))
            err.Add("Sektör boş geçilemez");

        if (string.IsNullOrWhiteSpace(cariModel.Ilce) || string.IsNullOrWhiteSpace(cariModel.Il) || string.IsNullOrWhiteSpace(cariModel.Ulke))
            err.Add("Adres bilgilerini tam doldurunuz (Ülke/Şehir/İlçe)");

        if (err.Count > 0)
        {
            var ex = new ClientException("Boş geçilemez alanlar");
            ex.ErrorList = err;

            throw ex;
        }
    }

    public async Task SektorListesiGetir()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<List<SpeCodesDto>>(UrlHelper.CariSektorList + "?logofirmno=" + selectedFirmaDonem.logo_firma);
            if (result != null)
            {
                SektorListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
}
