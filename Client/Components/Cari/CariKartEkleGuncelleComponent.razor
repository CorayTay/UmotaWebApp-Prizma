
<EditForm Model="cariModel" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mt-5">

        <div class="form">
            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label>Ref</label>
                        <InputNumber @bind-Value="cariModel.Logref" class="form-control" disabled/>
                    </div>
                    <div class="col-md-6">
                        <label>Kodu</label>
                        <InputText @bind-Value="cariModel.Kodu" class="form-control" disabled/>
                    </div>
                </div>
                
            </div>

            <div class="form-group">

                <div class="row">
                    <div class="col-md-6">
                        <label>Adı</label>
                        <InputText @bind-Value="cariModel.Adi" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label>Adı 2</label>
                        <InputText @bind-Value="cariModel.Adi2" class="form-control" />
                    </div>
                </div>
                
            </div>

            <div class="form-group">

                <div class="row">
                    <div class="col-md-4">
                        <label>İlçe</label>
                        <InputText @bind-Value="cariModel.Ilce" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label>Şehir</label>
                        <InputText @bind-Value="cariModel.Il" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label>Ülke</label>
                        <InputText @bind-Value="cariModel.Ulke" class="form-control" />
                    </div>
                </div>
                
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Telefon 1</label>
                        <InputText @bind-Value="cariModel.Tel1" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label>Telefon 2</label>
                        <InputText @bind-Value="cariModel.Tel2" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label>Fax</label>
                        <InputText @bind-Value="cariModel.Faks" class="form-control" />
                    </div>
                </div>
                
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label>E-Posta</label>
                        <InputText @bind-Value="cariModel.Mail" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label>Web Sitesi</label>
                        <InputText @bind-Value="cariModel.Web" class="form-control" />
                    </div>
                </div>
                
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-3">
                        <label>Özel Kod</label>
                        <InputText @bind-Value="cariModel.Ozelkod" class="form-control" />
                    </div>
                    <div class="col-md-3">
                        <label>Özel Kod 2</label>
                        <InputText @bind-Value="cariModel.Ozelkod2" class="form-control" />
                    </div>
                    <div class="col-md-3">
                        <label>Özel Kod 3</label>
                        <InputText @bind-Value="cariModel.Ozelkod3" class="form-control" />
                    </div>
                    <div class="col-md-3">
                        <label>Özel Kod 4</label>
                        <InputText @bind-Value="cariModel.Ozelkod4" class="form-control" />
                    </div>
                </div>
                
            </div>

        </div>
    </div>



    <div class="form-group">
        <SaveButtonComponent Caption="Kaydet" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="goBackCariList" />
    </div>

</EditForm>



@code
{
    [Parameter]
    public int? CariKartRef { get; set; }
    [Parameter]
    public int? modalForm { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    CariKartDto cariModel = new CariKartDto();

    private bool isUpdate = false;

    public async Task CariKartGetir()
    {
        try
        {
            if (!CariKartRef.HasValue)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            cariModel = await httpClient.GetServiceResponseAsync<CariKartDto>(UrlHelper.CariKartGetirLogRef + "?logref=" + CariKartRef + "&firmaId=" + selectedFirmaDonem.firma_no.Value);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task Kaydet()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            if (!isUpdate)
            {
                var reff = await httpClient.GetServiceResponseAsync<int>(UrlHelper.RefNoAl + "?tablename=cari_kart&firmaId=" + selectedFirmaDonem.firma_no.Value);

                cariModel.Logref = reff * -1;
                cariModel.Status = 0;
                cariModel.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                cariModel.Insdate = DateTime.Now;
                cariModel.Active = 0;
                await NoUret();
            }
            else
            {
                cariModel.Status = 1;
                cariModel.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                cariModel.Upddate = DateTime.Now;
            }

            var request = new CariKartRequestDto();
            request.CariKart = cariModel;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            if (isUpdate)
            {
                cariModel = await httpClient.PostGetServiceResponseAsync<CariKartDto, CariKartRequestDto>(UrlHelper.CariKartGuncelle, request);
                Snackbar.Add("Cari kart güncellendi", severity: Severity.Success);
            }
            else
            {
                cariModel = await httpClient.PostGetServiceResponseAsync<CariKartDto, CariKartRequestDto>(UrlHelper.CariKartKaydet, request);
                Snackbar.Add("Cari kart eklendi", severity: Severity.Success);
            }

            if (modalForm.HasValue)
                await ModalInstance.CloseAsync(ModalResult.Ok<CariKartDto>(cariModel));
            else
                await goBackCariList();
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    public async Task ValidSubmit()
    {
        await Kaydet();
    }

    public async Task goBackCariList()
    {
        if (modalForm.HasValue)
            await ModalInstance.CloseAsync();
        else
            navigation.NavigateTo("/r_carilistef");
    }

    protected override Task OnParametersSetAsync()
    {
        if (CariKartRef.HasValue)
            isUpdate = true;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        if (CariKartRef.HasValue)
            isUpdate = true;

        if (isUpdate)
        {
            await CariKartGetir();
            return;
        }

        await NoUret();
    }

    public async Task NoUret()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=cari_kart&keyField=kodu&firmaId=" + selectedFirmaDonem.firma_no.Value);

            cariModel.Kodu = result;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

}
