<EditForm Model="teklifrequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mt-12">
        <div class="form">

            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label>Başlangıç Tarih</label>
                        <InputDate @bind-Value="teklifrequest.BaslangicTarih" class="form-control"></InputDate>
                    </div>
                    <div class="col-md-6">
                        <label>Bitiş Tarih</label>
                        <InputDate @bind-Value="teklifrequest.BitisTarih" class="form-control"></InputDate>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-8">
                        <label>Teklif Durumu</label>
                        <InputSelect @bind-Value="teklifrequest.Duruminfo" class="form-control">
                            <option value="">@Utils.Mesajlar.Seciniz</option>
                            <option value=@TeklifDurum.TeklifHazirlaniyor>@TeklifDurum.TeklifHazirlaniyor</option>
                            <option value=@TeklifDurum.MusteriOnayiBekliyor>@TeklifDurum.MusteriOnayiBekliyor</option>
                            <option value=@TeklifDurum.FinansalUygunlukBekleniyor>@TeklifDurum.FinansalUygunlukBekleniyor</option>
                            <option value=@TeklifDurum.KesinSiparis>@TeklifDurum.KesinSiparis</option>
                            <option value=@TeklifDurum.MusteriTeklifteRevizeIstedi>@TeklifDurum.MusteriTeklifteRevizeIstedi</option>
                            <option value=@TeklifDurum.MusteriTeklifiIptalEtti>@TeklifDurum.MusteriTeklifiIptalEtti</option>
                            <option value=@TeklifDurum.UnoTeklifiIptalEtti>@TeklifDurum.UnoTeklifiIptalEtti</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-4">
                        <label>Revize Durumu</label>
                        <InputSelect @bind-Value="teklifrequest.Revizyon" class="form-control">
                            <option value=0>Hariç</option>
                            <option value=-1>Dahil</option>
                            <option value=1>Revize</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>Müşteri Adı</label>
                        <InputText @bind-Value="teklifrequest.Cariadi" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label>Proje Adı</label>
                        <InputText @bind-Value="teklifrequest.Proje" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-8">
                        <label>Satış Temsilcisi</label>
                        <InputSelect @bind-Value="teklifrequest.Personelref" class="form-control">
                            @if (PersonelListesi != null)
                            {
                                <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                @foreach (var item in PersonelListesi)
                                {
                                    <option value="@item.LOGICALREF">@item.DEFINITION_</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-4">
                        <label>Döviz</label>
                        <InputSelect @bind-Value="teklifrequest.Dovizrefid" class="form-control">
                            @if (DovizListesi != null)
                            {
                                <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                @foreach (var item in DovizListesi)
                                {
                                    <option value="@item.CURTYPE">@item.CURCODE</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>

            </div>

        </div>
    </div>


    <div class="form-group">
        <SaveButtonComponent Caption="Tamam" OnClick="Tamam" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
    </div>

</EditForm>

@code {
    [Parameter]
    public TeklifRequestDto mainRequest { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    TeklifRequestDto teklifrequest = new TeklifRequestDto();
    public IEnumerable<DovizDto> DovizListesi { get; set; }
    public List<PersonelDto> PersonelListesi { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await DovizListesiGetir();
        await PersonelListesiGetir();

        if (mainRequest != null)
            teklifrequest = mainRequest;
    }

    private async Task Tamam()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok<TeklifRequestDto>(teklifrequest));
    }

    public async Task Vazgec()
    {
        await ModalInstance.CloseAsync();
    }

    public async Task PersonelListesiGetir()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var result = await httpClient.GetServiceResponseAsync<List<PersonelDto>>("/api/helper/GetPersonelList?logofirmno=" + selectedFirmaDonem.logo_firma.Value);
            if (result != null)
            {
                PersonelListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task DovizListesiGetir()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<IEnumerable<DovizDto>>(UrlHelper.DovizListesi + "?logofirmno=" + selectedFirmaDonem.logo_firma.Value);
            if (result != null)
            {
                DovizListesi = result;
            }
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }
  }
