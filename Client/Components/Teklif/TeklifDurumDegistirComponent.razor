<EditForm Model="teklif">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mt-12">
        <div class="form">

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Teklif No</label>
                        <InputText @bind-Value="teklif.Teklifno" class="form-control" disabled></InputText>
                    </div>
                    <div class="col-md-6">
                        <label>Mevcut Durum</label>
                        <InputText @bind-Value="teklif.Duruminfo" class="form-control" disabled></InputText>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-10">
                        <label>Yeni Durum</label>
                        <InputSelect @bind-Value="teklif.NewDuruminfo" class="form-control">
                            <option value=-1>@Utils.Mesajlar.Seciniz</option>
                            @if (admin == 1)
                            {
                                <option value=@TeklifDurum.TeklifHazirlaniyor>@TeklifDurum.TeklifHazirlaniyor</option>
                                <option value=@TeklifDurum.MusteriOnayiBekliyor>@TeklifDurum.MusteriOnayiBekliyor</option>
                                <option value=@TeklifDurum.FinansalUygunlukBekleniyor>@TeklifDurum.FinansalUygunlukBekleniyor</option>
                                <option value=@TeklifDurum.KesinSiparis>@TeklifDurum.KesinSiparis</option>
                            }
                            else
                            {
                                @if (teklif.Duruminfo == TeklifDurum.TeklifHazirlaniyor || teklif.Duruminfo == TeklifDurum.TeklifRevizyonda)
                                {
                                    <option value=@TeklifDurum.MusteriOnayiBekliyor>@TeklifDurum.TeklifMusteriyeGonderildi</option>
                                    <option value=@TeklifDurum.UnoTeklifiIptalEtti>@TeklifDurum.UnoTeklifiIptalEtti</option>
                                }
                                @if (teklif.Duruminfo == TeklifDurum.MusteriOnayiBekliyor)
                                {
                                    <option value=@TeklifDurum.FinansalUygunlukBekleniyor>@TeklifDurum.MusteriTeklifiOnayladi</option>
                                    <option value=@TeklifDurum.MusteriTeklifteRevizeIstedi>@TeklifDurum.MusteriTeklifteRevizeIstedi</option>
                                    <option value=@TeklifDurum.MusteriTeklifiIptalEtti>@TeklifDurum.MusteriTeklifiIptalEtti</option>
                                    <option value=@TeklifDurum.UnoTeklifiIptalEtti>@TeklifDurum.UnoTeklifiIptalEtti</option>
                                }
                                @if (teklif.Duruminfo == TeklifDurum.FinansalUygunlukBekleniyor)
                                {
                                    <option value=@TeklifDurum.KesinSiparis>@TeklifDurum.FinansalUygunlukVer</option>
                                    <option value=@TeklifDurum.MusteriTeklifiIptalEtti>@TeklifDurum.MusteriTeklifiIptalEtti</option>
                                    <option value=@TeklifDurum.UnoTeklifiIptalEtti>@TeklifDurum.UnoTeklifiIptalEtti</option>
                                }
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-10">
                        <label>Açıklama</label>
                        <InputTextArea @bind-Value="teklif.TeklifDurumAciklama" class="form-control"></InputTextArea>
                    </div>
                </div>
            </div>

        </div>
    </div>


    <div class="form-group">
        <SaveButtonComponent Caption="Kaydet" OnClick="UpdateTeklifDurum" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
    </div>

</EditForm>

@code {
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }


    [Parameter]
    public int? logRef { get; set; }

    [Parameter]
    public int? admin { get; set; }

    public bool isAdmin { get; set; }

    TeklifDto teklif = new TeklifDto();

    protected override async Task OnInitializedAsync()
    {
        await ValidateAdmin();
        await GetTeklif();
    }

    public async Task GetTeklif()
    {
        try
        {
            if (logRef.HasValue == false)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<TeklifDto>(UrlHelper.TeklifGetir + "?logref=" + logRef + "&firmaId=" + selectedFirmaDonem.firma_no);
            if (result != null)
            {
                teklif = result;
            }
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    private async Task UpdateTeklifDurum()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            teklif.Upddate = DateTime.Now;
            teklif.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklif.Status = 1;
            teklif.Lfirma = selectedFirmaDonem.logo_firma.Value.ToString();

            var request = new TeklifRequestDto();
            request.Teklif = teklif;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;
            request.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.PostAsJsonAsync(UrlHelper.TeklifDurumGuncelle, request);

            var response = await result.Content.ReadFromJsonAsync<ServiceResponse<TeklifDto>>();
            if (!response.Success)
                throw new Exception(response.Message);

            Snackbar.Add("Teklif Durumu güncellendi", severity: Severity.Success);

            await ModalInstance.CloseAsync(ModalResult.Ok<TeklifDto>(response.Value));
        }
        catch (ClientException e)
        {
            foreach (var item in e.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }


    public async Task Vazgec()
    {
        await ModalInstance.CloseAsync();
    }

    private async Task ValidateAdmin()
    {
        if (admin.HasValue && admin.Value == 1)
        {
            try
            {
                var kullanici_kodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

                var result = await httpClient.GetServiceResponseAsync<SisKullaniciDto>(UrlHelper.KullaniciGetByKod + "?kod=" + kullanici_kodu);

                if (result != null)
                {
                    isAdmin = result.KullaniciYetkiKodu.Equals("ADM");
                }
            }
            catch (Exception)
            {
                isAdmin = false;
            }

            if (!isAdmin)
            {
                Snackbar.Add("Admin değilsiniz", severity: Severity.Warning);
                await ModalInstance.CloseAsync(); ;
            }
        }


    }
}
