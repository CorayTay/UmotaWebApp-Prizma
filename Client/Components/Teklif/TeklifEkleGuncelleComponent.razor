<EditForm Model="teklif">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mt-6">
        <div class="form">
            <div class="form-group">

                <div class="row">
                    <div class="col-4">
                        <label>Ref</label>
                        <InputNumber @bind-Value="teklif.Logref" class="form-control" />
                    </div>
                    <div class="col-4">
                        <label>Teklif No</label>
                        <InputText @bind-Value="teklif.Teklifno" class="form-control" />
                    </div>
                    <div class="col-4">
                        <label>Belge No</label>
                        <InputText @bind-Value="teklif.Tbelgeno" class="form-control" />
                    </div>
                </div>

            </div>

            <div class="form-group">
                <label>Cari</label>
                <div class="row">
                    <div class="col">
                        <InputText @bind-Value="teklif.LcariKodu" class="form-control" placeholder="Cari Kodu" />
                    </div>
                    <div class="col">
                        <InputText @bind-Value="teklif.LcariAdi" class="form-control" placeholder="Cari Adı" />
                    </div>
                    <div class="col">
                        <SaveButtonComponent Caption="Cari Listesi" OnClick="CariListesiAc" />
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-4">
                        <label>Teklif Tarihi</label>
                        <InputDate @bind-Value="teklif.Tarih" class="form-control"></InputDate>
                    </div>
                    <div class="col-4">
                        <label>Teslim Tarihi</label>
                        <InputDate @bind-Value="teklif.TeslimTarihi" class="form-control"></InputDate>
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-4">
                        <label>Proje Adı</label>
                        <InputText @bind-Value="teklif.Proje" class="form-control"></InputText>
                    </div>
                    <div class="col-4">
                        <label>İlgili Kişi</label>
                        <InputText @bind-Value="teklif.IlgiliAdi" class="form-control"></InputText>
                    </div>

                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-8">
                        <label>Açıklama</label>
                        <InputTextArea @bind-Value="teklif.Aciklama1" class="form-control"></InputTextArea>
                    </div>
                </div>
            </div>

        </div>
    </div>


    <div class="form-group">
        <SaveButtonComponent Caption="Kaydet" OnClick="ValidSubmit" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
    </div>

</EditForm>

@code {
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Parameter]
    public int? logRef { get; set; }

    [Parameter]
    public EventCallback OnVazgecClicked { get; set; }

    public bool IsUpdate { get; set; }

    TeklifDto teklif = new TeklifDto();

    protected override async Task OnParametersSetAsync()
    {
        IsUpdate = logRef.HasValue;
        if (IsUpdate)
        {
            await GetTeklif();
            return;
        }

        await TeklifNoUret();
    }

    public async Task GetTeklif()
    {
        try
        {
            var result = await httpClient.GetServiceResponseAsync<TeklifDto>("/api/teklif/get?logref=" + logRef);
            if (result != null)
            {
                teklif = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task ValidSubmit()
    {
        if (IsUpdate)
            await UpdateTeklif();
        else
            await SaveTeklif();
    }

    public async Task CariListesiAc()
    {
        var cariForm = modal.Show<Pages.Cari.Cari_Sec>();
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (CariKartDto)result.Data;
                teklif.LcariAdi = cariSecim.Adi;
                teklif.LcariKodu = cariSecim.Kodu;
                teklif.Cariref = cariSecim.Logref;
            }

        }
    }

    private async Task UpdateTeklif()
    {
        try
        {
            teklif.Upddate = DateTime.Now;
            teklif.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDto, TeklifDto>("/api/teklif/update", teklif);

            Snackbar.Add("Teklif güncellendi");

            navigation.NavigateTo("/stek_listef_detay/" + result.Logref);

        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    private async Task SaveTeklif()
    {
        try
        {
            teklif.Insdate = DateTime.Now;
            teklif.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklif.Tarih = teklif.Tarih.HasValue ? teklif.Tarih : DateTime.Now;
            teklif.Saat = teklif.Saat.HasValue ? teklif.Saat : DateTime.Now;

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDto, TeklifDto>("/api/teklif/save", teklif);

            Snackbar.Add("Teklif güncellendi");

            navigation.NavigateTo("/stek_listef_detay/" + result.Logref);

        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task Vazgec()
    {
        await OnVazgecClicked.InvokeAsync();
    }

    public async Task TeklifNoUret()
    {
        var result = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=teklif&keyField=teklifno");
        if (string.IsNullOrEmpty(result) == false)
        {
            teklif.Teklifno = result;
        }

        var result2 = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=teklif&keyField=logref");
        if (string.IsNullOrEmpty(result) == false)
        {
            teklif.Logref = Convert.ToInt32(result2);
        }

    }

}
