
<EditForm Model="teklifDetay">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mt-12">
        <div class="form">
            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Çizim Kodu</label>
                        <InputText @bind-Value="teklifDetay.Cizimkodu" class="form-control" placeholder="Çizim Kodu" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Malzeme Kodu</label>
                        <InputText @bind-Value="teklifDetay.LstokKodu" class="form-control" placeholder="Stok Kodu" />
                    </div>
                    <div class="col-md-6">
                        <label>Malzeme Tanımı</label>
                        <InputText @bind-Value="teklifDetay.LstokAdi" class="form-control" placeholder="Stok Adı" />
                    </div>
                    <div class="col-md-2">
                        <label>Malzemeler</label>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FindInPage" 
                                   OnClick="MalzemeListesiAc"
                                   Color="Color.Info" Size="Size.Medium">Bul</MudButton>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2">
                        <label>Mitar</label>
                        <InputNumber @bind-Value="teklifDetay.Miktar" class="form-control" placeholder="Miktar" />
                    </div>
                    <div class="col-md-2">
                        <label>Fiyat</label>
                        <InputNumber @bind-Value="teklifDetay.Fiyat" class="form-control" placeholder="Fiyat" />
                    </div>
                    <div class="col-md-2">
                        <label>Döviz</label>
                        <InputSelect @bind-Value="teklifDetay.Dovizref" class="form-control">
                            @if (DovizListesi != null)
                            {
                                @foreach (var item in DovizListesi)
                                {
                                    <option value="@item.CURTYPE">@item.CURCODE</option>
                                }
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-4">
                        <label>Tutar</label>
                        <InputNumber @bind-Value="teklifDetay.Tutar" class="form-control" placeholder="Tutar" />
                    </div>
                </div>
            </div>

        </div>
    </div>


    <div class="form-group">
        <SaveButtonComponent Caption="Kaydet" OnClick="ValidSubmit" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
    </div>

</EditForm>

@code {

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Parameter]
    public int? logRef { get; set; }

    [Parameter]
    public int? teklifRef { get; set; }

    [Parameter]
    public EventCallback OnVazgecClicked { get; set; }

    public bool IsUpdate { get; set; }

    TeklifDetayDto teklifDetay = new TeklifDetayDto();

    public List<DovizDto> DovizListesi { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsUpdate = logRef.HasValue;
        if (IsUpdate)
        {
            await GetTeklifDetay();
            return;
        }

        await DovizListesiGetir();
    }

    public async Task GetTeklifDetay()
    {
        await Task.CompletedTask;
    }

    public async Task LogRefUret()
    {

        var result2 = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=teklifdetay&keyField=logref");
        if (string.IsNullOrEmpty(result2) == false)
        {
            teklifDetay.Logref = Convert.ToInt32(result2);
        }

    }

    public async Task DovizListesiGetir()
    {
        try
        {
            var result = await httpClient.GetServiceResponseAsync<List<DovizDto>>("/api/helper/GetDovizList?logofirmno=1");
            if (result != null)
            {
                DovizListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task MalzemeListesiAc()
    {
        var form = modal.Show<Pages.Malzeme.Malzeme_Sec>();
        var result = await form.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var mkart = (MalzemeKartDto)result.Data;
                teklifDetay.LstokAdi = mkart.Adi;
                teklifDetay.LstokKodu = mkart.Kodu;
                teklifDetay.Fiyat = mkart.Satfiyat;
                teklifDetay.Fiyattl = mkart.Satfiyat;
            }

        }
    }

    public async Task ValidSubmit()
    {
        if (IsUpdate)
            await UpdateTeklifDetay();
        else
            await SaveTeklifDetay();

        modalParameters = new ModalParameters();
        modalParameters.Add("teklifDetay", teklifDetay);
        await ModalInstance.CloseAsync(ModalResult.Ok<TeklifDetayDto>(teklifDetay));
    }

    private async Task UpdateTeklifDetay()
    {
        try
        {
            teklifDetay.Upddate = DateTime.Now;
            teklifDetay.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var request = new TeklifDetayRequestDto();
            request.TeklifDetay = teklifDetay;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDetayDto, TeklifDetayRequestDto>("/api/teklifdetay/update", request);

            Snackbar.Add("Teklif güncellendi");

        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    private async Task SaveTeklifDetay()
    {
        try
        {
            await LogRefUret();
            teklifDetay.Insdate = DateTime.Now;
            teklifDetay.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklifDetay.Teklifref = teklifRef;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var request = new TeklifDetayRequestDto();
            request.TeklifDetay = teklifDetay;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDetayDto, TeklifDetayRequestDto>("/api/teklifdetay/save", request);

            Snackbar.Add("Teklif güncellendi");

            await ModalInstance.CloseAsync(ModalResult.Ok<TeklifDetayDto>(teklifDetay));
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    public async Task Vazgec()
    {
        await ModalInstance.CloseAsync();
    }
}
