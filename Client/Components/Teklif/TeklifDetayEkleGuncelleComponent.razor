
<EditForm Model="teklifDetay">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mt-12">
        <div class="form">
            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Çizim Kodu</label>
                        <InputText @bind-Value="teklifDetay.Cizimkodu" class="form-control" placeholder="Çizim Kodu" />
                    </div>
                    <div class="col-md-4">
                        <label>Poz No</label>
                        <InputText @bind-Value="teklifDetay.Sipnosira" class="form-control" placeholder="Poz no" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Malzeme Kodu</label>
                        <InputText @bind-Value="teklifDetay.Malzkodu" class="form-control" placeholder="Stok Kodu" />
                    </div>
                    <div class="col-md-6">
                        <label>Malzeme Tanımı</label>
                        <InputText @bind-Value="teklifDetay.Malzadi" class="form-control" placeholder="Stok Adı" />
                    </div>
                    <div class="col-md-2">
                        <label>Malzemeler</label>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FindInPage"
                                   OnClick="MalzemeListesiAc"
                                   Color="Color.Info" Size="Size.Medium">Bul</MudButton>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Marka</label>
                        <InputText @bind-Value="teklifDetay.Marka" class="form-control" placeholder="Marka" disabled/>
                    </div>
                    <div class="col-md-4">
                        <label>Menşei</label>
                        <InputText @bind-Value="teklifDetay.Mensei" class="form-control" placeholder="Menşei" disabled/>
                    </div>
                    <div class="col-md-4">
                        <label>Ebat</label>
                        <InputText @bind-Value="teklifDetay.Ebat" class="form-control" placeholder="Ebat" disabled/>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2">
                        <label>Mitar</label>
                        <InputNumber @bind-Value="teklifDetay.Miktar" class="form-control" placeholder="Miktar" />
                    </div>
                    <div class="col-md-2">
                        <label>Birim</label>
                        <InputText @bind-Value="teklifDetay.Birimkodu" class="form-control" placeholder="Birim" disabled />
                    </div>
                    <div class="col-md-2">
                        <label>Fiyat</label>
                        <InputNumber @bind-Value="teklifDetay.Fiyat" class="form-control" placeholder="Fiyat" disabled />
                    </div>
                    <div class="col-md-2">
                        <label>Döviz</label>
                        <InputSelect @bind-Value="teklifDetay.Dovizref" class="form-control">
                            <option value="-1">@Utils.Mesajlar.Seciniz</option>
                            @if (DovizListesi != null)
                            {
                                @foreach (var item in DovizListesi)
                                {
                                    <option value="@item.CURTYPE">@item.CURCODE</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-2">
                        <label>Tutar</label>
                        <InputNumber @bind-Value="teklifDetay.Tutar" class="form-control" placeholder="Tutar" />
                    </div>
                </div>
            </div>

        </div>
    </div>


    <div class="form-group">
        <SaveButtonComponent Caption="Kaydet" OnClick="ValidSubmit" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
    </div>

</EditForm>

@code {

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Parameter]
    public int? logRef { get; set; }

    [Parameter]
    public int? teklifRef { get; set; }

    [Parameter]
    public EventCallback OnVazgecClicked { get; set; }

    public bool IsUpdate { get; set; }

    TeklifDetayDto teklifDetay = new TeklifDetayDto();

    public List<DovizDto> DovizListesi { get; set; }

    private bool _TeklifDetayCekildi = false;

    protected override Task OnParametersSetAsync()
    {
        IsUpdate = logRef.HasValue;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        IsUpdate = logRef.HasValue;

        if (IsUpdate && !_TeklifDetayCekildi)
        {
            await GetTeklifDetay();
        }
        else
        {
            await GetTeklifDetaySiraNo();
        }


        await DovizListesiGetir();
    }

    public async Task GetTeklifDetaySiraNo()
    {
        try
        {
            if (!string.IsNullOrEmpty(teklifDetay.Sipnosira))
                return;

            if (teklifRef == null)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            var result = await httpClient.GetServiceResponseAsync<string>(UrlHelper.TeklifDetaySiraNo + "?teklifref=" + teklifRef + "&firmaId=" + selectedFirmaDonem.firma_no.Value);

            teklifDetay.Sipnosira = result;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task GetTeklifDetay()
    {
        try
        {

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            teklifDetay = await httpClient.GetServiceResponseAsync<TeklifDetayDto>(UrlHelper.TeklifDetayGetir + "?logref=" + logRef + "&firmaId=" + selectedFirmaDonem.firma_no.Value);

            _TeklifDetayCekildi = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task LogRefUret()
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
        if (selectedFirmaDonem == null)
            throw new Exception("Firma dönem seçilmedi");


        var result2 = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=teklifdetay&keyField=logref&firmaId=" + selectedFirmaDonem.firma_no.Value);
        if (string.IsNullOrEmpty(result2) == false)
        {
            teklifDetay.Logref = Convert.ToInt32(result2);
        }

    }

    public async Task DovizListesiGetir()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<List<DovizDto>>(UrlHelper.DovizListesi + "?logofirmno=" + selectedFirmaDonem.firma_no);
            if (result != null)
            {
                DovizListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task MalzemeListesiAc()
    {
        var opt = new ModalOptions();
        opt.ContentScrollable = true;

        var form = modal.Show<Pages.Malzeme.Malzeme_Sec>("Malzeme Seç",options: opt);
        var result = await form.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var mkart = (MalzemeKartDto)result.Data;
                teklifDetay.LstokId = mkart.Logref;
                teklifDetay.Malzadi = mkart.Adi;
                teklifDetay.Malzkodu = mkart.Kodu;
                teklifDetay.Birimkodu = mkart.Birimkodu;
                teklifDetay.Marka = mkart.Descr;
                teklifDetay.Mensei = mkart.Definition;
                teklifDetay.Ebat = mkart.Ebatt;
                if (mkart.Kodu.StartsWith("UMOTA"))
                {
                    teklifDetay.Fiyat = mkart.Satfiyat;
                    switch (mkart.SatfiyatDov)
                    {
                        case "TL":
                            teklifDetay.Dovizref = 160;
                            break;
                        case "USD":
                            teklifDetay.Dovizref = 1;
                            break;
                        case "EUR":
                            teklifDetay.Dovizref = 20;
                            break;
                        case "GBP":
                            teklifDetay.Dovizref = 17;
                            break;
                        case "CHF":
                            teklifDetay.Dovizref = 1;
                            break;
                        default:
                            teklifDetay.Dovizref = 160;
                            break;
                    }
                    teklifDetay.Maliyet1 = mkart.Alfiyat;
                    teklifDetay.Maliyet2 = mkart.Alfiyat;
                } else
                {
                    await FiyatGetir();
                }
            }

        }
    }

    public async Task ValidSubmit()
    {
        if (IsUpdate)
            await UpdateTeklifDetay();
        else
            await SaveTeklifDetay();

        modalParameters = new ModalParameters();
        modalParameters.Add("teklifDetay", teklifDetay);
        await ModalInstance.CloseAsync(ModalResult.Ok<TeklifDetayDto>(teklifDetay));
    }

    private async Task UpdateTeklifDetay()
    {
        try
        {
            teklifDetay.Upddate = DateTime.Now;
            teklifDetay.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklifDetay.Status = 1;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var request = new TeklifDetayRequestDto();
            request.TeklifDetay = teklifDetay;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDetayDto, TeklifDetayRequestDto>("/api/teklifdetay/update", request);

            Snackbar.Add("Teklif güncellendi", severity:Severity.Success);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    private async Task SaveTeklifDetay()
    {
        try
        {
            await LogRefUret();
            teklifDetay.Insdate = DateTime.Now;
            teklifDetay.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklifDetay.Teklifref = teklifRef;
            teklifDetay.Status = 0;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var request = new TeklifDetayRequestDto();
            request.TeklifDetay = teklifDetay;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDetayDto, TeklifDetayRequestDto>("/api/teklifdetay/save", request);

            Snackbar.Add("Teklif güncellendi", severity: Severity.Success);

            await ModalInstance.CloseAsync(ModalResult.Ok<TeklifDetayDto>(teklifDetay));
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task Vazgec()
    {
        await ModalInstance.CloseAsync();
    }

    public async Task FiyatGetir()
    {
        try
        {
            //if (teklif.Dovizrefid <= 0)
            //{
            //    throw new Exception("Döviz tipi seçmelisiniz");
            //}
            //_DovizKuruState = "Çekiliyor...";
            //teklif.Dovizkuruid = null;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var request = new MalzemeFiyatRequestDto();
            request.Tarih = DateTime.Now;
            request.MalzemeRef = teklifDetay.LstokId.Value;
            request.CariKodu = "";
            request.BirimKodu = "ADET";
            request.DovizRef = teklifDetay.Dovizref.HasValue ? teklifDetay.Dovizref.Value : 160;
            request.LogoFirmaNo = selectedFirmaDonem.logo_firma.Value;

            var result = await httpClient.PostGetServiceResponseAsync<MalzemeFiyatDto, MalzemeFiyatRequestDto>(UrlHelper.MalzemeFiyatGetir, request);

            if (result != null)
            {
                teklifDetay.Fiyat = result.Fiyat;
                teklifDetay.Dovizref = result.DovizRef;
            }
            ////_DovizKuruState = "Güncel";

            // this.StateHasChanged();


        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

}
