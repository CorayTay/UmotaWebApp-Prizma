@using System.Globalization

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenChart>

                <RadzenBarSeries Data="@personelSatisGenel" CategoryProperty="PersonelAdi" Title="Tüm" LineType="LineType.Dashed" ValueProperty="MatrahTutar" />

                <RadzenBarSeries Data="@personelSatisBuSene" CategoryProperty="PersonelAdi" Title="2022" LineType="LineType.Dashed" ValueProperty="MatrahTutar" />

                <RadzenBarSeries Data="@personelSatisGecenSene" CategoryProperty="PersonelAdi" Title="2021" LineType="LineType.Dashed" ValueProperty="MatrahTutar" />

                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Teklif Matrah Tutarı" />
                </RadzenValueAxis>
                <RadzenBarOptions Radius="5" />
            </RadzenChart>
        </div>
    </div>
</div>


@code {

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPersonelTeklif();
    }

    public async Task LoadPersonelTeklif()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<IEnumerable<PersonelTeklifSatisDto>>(UrlHelper.DashboardPersonelTeklifSatis
                + "?firmaId=" + selectedFirmaDonem.firma_no);

            var resultThisYear = await httpClient.GetServiceResponseAsync<IEnumerable<PersonelTeklifSatisDto>>(UrlHelper.DashboardPersonelTeklifSatis
    + "?firmaId=" + selectedFirmaDonem.firma_no + "&year=" + DateTime.Now.Year);

            var resultPrevYear = await httpClient.GetServiceResponseAsync<IEnumerable<PersonelTeklifSatisDto>>(UrlHelper.DashboardPersonelTeklifSatis
+ "?firmaId=" + selectedFirmaDonem.firma_no + "&year=" + DateTime.Now.AddYears(-1).Year);

            personelSatisGenel = (List<PersonelTeklifSatisDto>)result;
            personelSatisBuSene = (List<PersonelTeklifSatisDto>)resultThisYear;
            personelSatisGecenSene = (List<PersonelTeklifSatisDto>)resultPrevYear;

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public List<PersonelTeklifSatisDto> personelSatisGenel = new List<PersonelTeklifSatisDto>();
    public List<PersonelTeklifSatisDto> personelSatisBuSene = new List<PersonelTeklifSatisDto>();
    public List<PersonelTeklifSatisDto> personelSatisGecenSene = new List<PersonelTeklifSatisDto>();

    class DataItem
    {
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("tr-TR"));
    }

    DataItem[] revenue2019 = new DataItem[]
    {
    new DataItem
    {
        Quarter = "Q1",
        Revenue = 234000
    },
    new DataItem
    {
        Quarter = "Q2",
        Revenue = 284000
    },
    new DataItem
    {
        Quarter = "Q3",
        Revenue = 274000
    },
    new DataItem
    {
        Quarter = "Q4",
        Revenue = 294000
    },
            };

    DataItem[] revenue2020 = new DataItem[] {
    new DataItem
    {
    Quarter = "Q1",
    Revenue = 254000
    },
    new DataItem
    {
    Quarter = "Q2",
    Revenue = 324000
    },
    new DataItem
    {
    Quarter = "Q3",
    Revenue = 354000
    },
    new DataItem
    {
    Quarter = "Q4",
    Revenue = 394000
    },

    };
}