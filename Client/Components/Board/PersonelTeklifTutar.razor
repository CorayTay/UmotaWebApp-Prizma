@using System.Globalization

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<div class="container">
    @if (_stepName == "step1")
    {
        <div class="row">
            <div class="col-sm-12">
                <RadzenChart>

                    <RadzenBarSeries Data="@personelSatisGenel" CategoryProperty="PersonelAdi" Title="Bu Yıl" LineType="LineType.Dashed"  ValueProperty="MatrahTutar" />


                    <RadzenValueAxis Formatter="@FormatAsUSD">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Tutarsal TL" />
                    </RadzenValueAxis>
                    <RadzenBarOptions Radius="5" />
                </RadzenChart>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12" style="text-align:right">
                <MudButton Variant="Variant.Filled" Disabled="!loadingCompleted" EndIcon="@Icons.Material.Filled.SkipNext" Color="Color.Primary" OnClick="DevamEt">Devam Et</MudButton>
            </div>
        </div>
    }

    @if (_stepName == "step2")
    {
        <div class="row">
            <div class="col-sm-12" style="text-align:center">
                 
                <MudText Typo="Typo.h4">@MusteriOnayiBekliyorTeklifSayisi adet <strong>Müşteri Onayı Bekliyor</strong> durumunda teklifiniz bulunmaktadır.</MudText>
     
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TekliflerimeGit">Satış Teklifleri</MudButton>

            </div>
        </div>
    }

</div>


@code {

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private bool loadingCompleted = false;
    private int MusteriOnayiBekliyorTeklifSayisi = 0;
    private string _stepName = "step1";
    public List<PersonelTeklifSatisDto> personelSatisGenel = new List<PersonelTeklifSatisDto>();


    protected override async Task OnInitializedAsync()
    {
        await LoadMusteriOnayiBekliyorData();
        await LoadPersonelTeklif();
    }

    public async Task LoadPersonelTeklif()
    {
        try
        {
            loadingCompleted = false;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<IEnumerable<PersonelTeklifSatisDto>>(UrlHelper.DashboardPersonelTeklifSatis
                + "?firmaId=" + selectedFirmaDonem.firma_no + "&year="+DateTime.Now.Year);


            personelSatisGenel = (List<PersonelTeklifSatisDto>)result;
            loadingCompleted = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task LoadMusteriOnayiBekliyorData()
    {
        try
        {
            loadingCompleted = false;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");


            var result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.ReportMusteriOnayiBekliyor
    + "?firmaId=" + selectedFirmaDonem.firma_no + "&kullanici=" + kullanicikodu);

            MusteriOnayiBekliyorTeklifSayisi = result;

            loadingCompleted = true;

        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401"))
            {
                navigation.NavigateTo("/login");
                return;
            }

            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }


    private void DevamEt()
    {
        if (MusteriOnayiBekliyorTeklifSayisi > 0)
        {
            _stepName = "step2";
            this.StateHasChanged();
        } else
        {
            MudDialog.Cancel();
        }
    }

    private void TekliflerimeGit()
    {
        //navigation.NavigateTo("/stek_listef/Müşteri%20Onayı%20Bekliyor");
        navigation.NavigateTo("/stek_listef");
        return;
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("tr-TR"));
    }


}
