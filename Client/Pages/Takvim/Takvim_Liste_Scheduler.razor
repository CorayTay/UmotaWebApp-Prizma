@page "/takvim_listef_scheduler"
@inject Radzen.DialogService DialogService

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="false"
                 ShowSearchSection="false"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

 
    <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" Title="Yeni Ekle"  OnClick="YeniTakvim" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />


    <MudIconButton Icon="@Icons.Material.Filled.List" Title="Liste Görünümü" OnClick="TakvimList" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" />
    <MudSpacer />

 

    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 500px;" TItem="TakvimDto" Data=@appointments StartProperty="Tarih" EndProperty="TarihEnd"
                     TextProperty="Baslik" SelectedIndex="1"
                     AppointmentRender=@OnAppointmentRender>
        <Template Context="appointments">
            <span style="color:black;font-size:10pt;">
                <strong>@appointments.Baslik</strong>
            </span>
            
        </Template>
        <ChildContent>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </ChildContent>
    </RadzenScheduler>

@code {
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    TakvimHelper TakvimHelper { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    RadzenScheduler<TakvimDto> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    private bool loadingCompleted = false;

    IList<TakvimDto> appointments = null;

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Personel Takvimi";
        await LoadTakvimBilgisi();
    }

    public async Task LoadTakvimBilgisi()
    {
        try
        {
            loadingCompleted = false;
            appointments = await TakvimHelper.LoadRecords();
            loadingCompleted = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<TakvimDto> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Baslik == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    private void YeniTakvim()
    {
        navigation.NavigateTo("/takvim_ekle_guncelle");
    }

    private void TakvimList()
    {
        navigation.NavigateTo("/takvim_listef");
    }
}
