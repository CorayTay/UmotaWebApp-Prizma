@page "/stek_listef"

<HeaderSearchBar header="header" onAddNewButtonClicked="YeniTeklif"
                 ShowButtons="false"
                 onDoneButtonClicked="TeklifAra" ShowSearchSection="true"></HeaderSearchBar>


<MudTable Items="@teklifler" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<TeklifDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="YeniTeklif" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Teklif Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Durum</MudTh>
        <MudTh>Teklif No</MudTh>
        <MudTh>Tarih</MudTh>
        <MudTh>Cari Kodu</MudTh>
        <MudTh>Cari Adı</MudTh>
        <MudTh>Tutar TL</MudTh>
        <MudTh>Tutar</MudTh>
        <MudTh>Döviz</MudTh>
        <MudTh>Proje Adı</MudTh>
        <MudTh>Satış Temsilcisi</MudTh>
        <MudTh>Teslim Tarihi</MudTh>
        <MudTh>Açıklama</MudTh>
        <MudTh>Kaydı Giren</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary">
                <MudMenuItem OnClick="(() => TeklifDetay(context.Logref))">Güncelle</MudMenuItem>
                <MudMenuItem OnClick="(() => TeklifDurumDegistir(context.Logref))">Durum Değiştir</MudMenuItem>
            </MudMenu>
        </MudTd>
        <MudTd DataLabel="Durum">@context.Duruminfo</MudTd>
        <MudTd DataLabel="Teklif No">@context.Teklifno</MudTd>
        <MudTd DataLabel="Tarih">@context.TarihFormatted</MudTd>
        <MudTd DataLabel="Cari Kodu">@context.Carikodu</MudTd>
        <MudTd DataLabel="Cari Adı">@context.Cariadi</MudTd>
        <MudTd DataLabel="Tutar TL" Style="text-align:right">@(Helper.FormattedDouble(context.Tutarmatrahtl))</MudTd>
        <MudTd DataLabel="Tutar" Style="text-align:right">@(Helper.FormattedDouble(context.Tutarmatrah))</MudTd>
        <MudTd DataLabel="Döviz">@context.Dovizdokuid</MudTd>
        <MudTd DataLabel="Proje Adı">@context.Proje</MudTd>
        <MudTd DataLabel="Satış Temsilcisi">@context.Temsilciadi</MudTd>
        <MudTd DataLabel="Teslim Tarihi">@context.TeslimTarihiFormatted</MudTd>
        <MudTd DataLabel="Açıklama">@context.Aciklama1</MudTd>
        <MudTd DataLabel="Kaydı Giren">@context.Insuser</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    public List<TeklifDto> teklifler { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    private string _searchString = "";
    private bool _sortNameByLength;

    private bool FilterFunc1(TeklifDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(TeklifDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Proje != null && element.Proje.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LcariAdi != null && element.LcariAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Teklifno != null && element.LcariKodu != null && element.TeslimTarihiFormatted != null
            && $"{element.Teklifno} {element.LcariKodu} {element.TeslimTarihiFormatted} {element.TeslimSekli}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Teklif Listesi";
        await LoadTeklifler();
    }

    private async Task LoadTeklifler()
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
        var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
        teklifler = await httpClient.GetServiceResponseAsync<List<TeklifDto>>(UrlHelper.TeklifListesi + "?firmaId=" + selectedFirmaDonem.firma_no+"&kullanicikodu="+kullanicikodu);
        teklifler = teklifler.OrderByDescending(i => i.Insdate).ToList();
    }

    public void TeklifDetay(int logref)
    {
        navigation.NavigateTo("/stek_listef_detay/" + logref.ToString());
    }

    public void YeniTeklif()
    {
        navigation.NavigateTo("/stek_listef_ekle");
    }

    private async Task TeklifAra()
    {
        var teklifSearch = new TeklifDto();
        teklifSearch.Aciklama1 = header.SearchText;

        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem == null)
            throw new Exception("Firma Dönem Seçili değil");

        var request = new TeklifRequestDto();
        request.Teklif = teklifSearch;
        request.FirmaId = selectedFirmaDonem.firma_no.Value;

        var result = await httpClient.PostGetServiceResponseAsync<List<TeklifDto>, TeklifRequestDto>(UrlHelper.TeklifAra, request);
        if (result == null || result.Count == 0)
        {
            await ModalManager.ShowMessageAsync("Arama", "Aradığınız kritere göre teklif bulunamadı.\n Lütfen detaylı aramayı seçiniz");
            return;
        }

        teklifler = result;

    }

    public void TeklifDurumDegistir(int logref)
    {
        navigation.NavigateTo("/stek_listef_detay/" + logref.ToString());
    }
}
