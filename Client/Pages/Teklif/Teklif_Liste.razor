@page "/stek_listef"

<HeaderSearchBar header="header" onAddNewButtonClicked="YeniTeklif" 
                 ShowButtons="true"
                 onDoneButtonClicked="TeklifAra" ShowSearchSection="true"></HeaderSearchBar>

<MudDataGrid MultiSelection="true" Items="@teklifler" Dense="true" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Teklif Listesi</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Teklif Ara" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="TeklifDto" Field="Teklifno" Title="Teklif No" Sortable="false" Filterable="false" />
        <Column T="TeklifDto" Field="Duruminfo" Title="Durum" CellStyleFunc="@_cellStyleFunc" />
        <Column T="TeklifDto" Field="TarihFormatted" Title="Teklif Tarihi" />
        <Column T="TeklifDto" Field="TeslimTarihiFormatted" Title="Teslim Tarihi" />
        <Column T="TeklifDto" Field="LcariAdi" SortBy="@_sortBy" Title="Cari" />
        <Column T="TeklifDto" Field="LcariKodu" Title="Cari Kodu" />
        <Column T="TeklifDto" Field="Lpersoneladi" Title="İlgili Kişi" />
        <Column T="TeklifDto" Field="TeslimSekli" Title="Teslim Şekli" />


    </Columns>
    <PagerContent>
        <MudDataGridPager T="TeklifDto" />
    </PagerContent>
</MudDataGrid>

@code {

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    public List<TeklifDto> teklifler { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<TeklifDto, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.LcariAdi.Length;
        else
            return x.LcariAdi;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<TeklifDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Proje.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.IlgiliAdi.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Teklifno} {x.Tbelgeno} {x.Lfirma}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private Func<TeklifDto, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.Duruminfo == "Müşteri Onayı Bekliyor")
            style += "background-color:#8CED8C";

        else if (x.Duruminfo == "Müşteri Siparişi İptal Etti")
            style += "background-color:#E5BDE5";

        else if (x.Duruminfo == "Müşteri Teklifi İptal Etti")
            style += "background-color:#EACE5D";

        else if (x.Duruminfo == "Teklif Hazırlanıyor")
            style += "background-color:#F1F165";

        else if (x.Duruminfo == "Kesin Sipariş Logoya Aktarıldı")
            style += "background-color:#357C3C";
        

        return style;
    };

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Teklif Listesi";
        await LoadTeklifler();
    }

    private async Task LoadTeklifler()
    {
        teklifler = await httpClient.GetServiceResponseAsync<List<TeklifDto>>("/api/teklif/list");
        teklifler = teklifler.OrderByDescending(i => i.Insdate).ToList();
    }

    public void TeklifDetay(int logref)
    {
        navigation.NavigateTo("/stek_listef_detay/" + logref.ToString());
    }

    public void YeniTeklif()
    {
        navigation.NavigateTo("/stek_listef_ekle");
    }

    private async Task TeklifAra()
    {
        var teklifSearch = new TeklifDto();
        teklifSearch.Aciklama1 = header.SearchText;

        var result = await httpClient.PostGetServiceResponseAsync<List<TeklifDto>, TeklifDto>("/api/teklif/search", teklifSearch);
        if (result == null || result.Count == 0)
        {
            await ModalManager.ShowMessageAsync("Arama", "Aradığınız kritere göre teklif bulunamadı.\n Lütfen detaylı aramayı seçiniz");
            return;
        }

        teklifler = result;

    }
}
