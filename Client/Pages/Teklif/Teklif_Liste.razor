@page "/stek_listef"

<HeaderSearchBar header="header" onAddNewButtonClicked="YeniTeklif"
                 ShowButtons="false" ShowFilterButton="true"
                 onDoneButtonClicked="TeklifAra" onFilterButtonClicked="TeklifDetayliAra" ShowSearchSection="_ShowSearchSection"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@teklifler" FixedHeader="true" Height="500px" Dense="true" Hover="true" RowsPerPage="100" Bordered="true" Striped="true" Filter="new Func<TeklifDto,bool>(FilterFunc1)">
    <ToolBarContent>
        @if (menuEklemeYetkisi)
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="YeniTeklif" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        }       
        <MudSpacer />
        @*<MudTextField @bind-Value="_searchString" Placeholder="Teklif Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Durum</MudTh>
        <MudTh>Teklif No</MudTh>
        <MudTh>Rvz No</MudTh>
        <MudTh>Tarih</MudTh>
        <MudTh>Cari Kodu</MudTh>
        <MudTh>Cari Adı</MudTh>
        <MudTh>Tutar TL</MudTh>
        <MudTh>Tutar</MudTh>
        <MudTh>Döviz</MudTh>
        <MudTh>Proje Adı</MudTh>
        <MudTh>Satış Temsilcisi</MudTh>
        <MudTh>Teslim Tarihi</MudTh>
        <MudTh>Açıklama</MudTh>
        <MudTh>Kaydı Giren</MudTh>
        <MudTh>#</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary">
                @if (menuDegistirmeYetkisi)
                {
                    <MudMenuItem OnClick="(() => TeklifDetay(context.Logref))">Değiştir</MudMenuItem>
                }
                <MudMenuItem OnClick="(() => TeklifDurumDegistir(context.Logref,null))">Durum Değiştir</MudMenuItem>
                @if (isAdmin)
                {
                    <MudMenuItem OnClick="(() => TeklifDurumDegistir(context.Logref,1))">Durum Değiştir(Admin)</MudMenuItem>
                }
                <MudMenuItem OnClick="(() => TeklifDurumDetay(context.Logref))">Durum Geçmişi</MudMenuItem>
            </MudMenu>
        </MudTd>
        <MudTd DataLabel="Durum">@context.Duruminfo</MudTd>
        <MudTd DataLabel="Teklif No">@context.Teklifno</MudTd>
        <MudTd DataLabel="Rvz No">@context.Revzno</MudTd>
        <MudTd DataLabel="Tarih">@context.TarihFormatted</MudTd>
        <MudTd DataLabel="Cari Kodu">@context.Carikodu</MudTd>
        <MudTd DataLabel="Cari Adı">@context.Cariadi</MudTd>
        <MudTd DataLabel="Tutar TL" Style="text-align:right">@(Helper.FormattedDouble(context.Tutarmatrahtl))</MudTd>
        <MudTd DataLabel="Tutar" Style="text-align:right">@(Helper.FormattedDouble(context.Tutarmatrah))</MudTd>
        <MudTd DataLabel="Döviz">@context.Dovizdokuid</MudTd>
        <MudTd DataLabel="Proje Adı">@context.Proje</MudTd>
        <MudTd DataLabel="Satış Temsilcisi">@context.Temsilciadi</MudTd>
        <MudTd DataLabel="Teslim Tarihi">@context.TeslimTarihiFormatted</MudTd>
        <MudTd DataLabel="Açıklama">@context.Aciklama1</MudTd>
        <MudTd DataLabel="Kaydı Giren">@context.Insuser</MudTd>
        <MudTd>
            @if (menuSilmeYetkisi)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" OnClick="(() => Sil(context.Logref))" Size="Size.Small" />
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>


@code {

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    public List<TeklifDto> teklifler { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    private string _searchString = "";
    private bool _sortNameByLength;
    private bool _ShowSearchSection = true;

    private bool isAdmin { get; set; }

    private bool menuGormeYetkisi { get; set; }
    private bool menuEklemeYetkisi { get; set; }
    private bool menuSilmeYetkisi { get; set; }

    private bool menuDegistirmeYetkisi { get; set; }
    private bool loadingCompleted { get; set; }

    private bool FilterFunc1(TeklifDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(TeklifDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Proje != null && element.Proje.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LcariAdi != null && element.LcariAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Teklifno != null && element.LcariKodu != null && element.TeslimTarihiFormatted != null
            && $"{element.Teklifno} {element.LcariKodu} {element.TeslimTarihiFormatted} {element.TeslimSekli}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void YetkiControl()
    {
        menuGormeYetkisi = isAdmin ? isAdmin : false;
        menuEklemeYetkisi = isAdmin ? isAdmin : false;
        menuDegistirmeYetkisi = isAdmin ? isAdmin : false;
        menuSilmeYetkisi = isAdmin ? isAdmin : false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            header.HeaderText = "Teklif Listesi";
            await CheckUser();

            YetkiControl();

            if (!isAdmin)
                await GetUserMenuYetkisi();

            await LoadTeklifler();

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }

    }

    private async Task LoadTeklifler()
    {
        try
        {
            loadingCompleted = false;
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklifler = await httpClient.GetServiceResponseAsync<List<TeklifDto>>(UrlHelper.TeklifListesi + "?firmaId=" + selectedFirmaDonem.firma_no + "&kullanicikodu=" + kullanicikodu);
            loadingCompleted = true;
            teklifler = teklifler.OrderByDescending(i => i.Insdate).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public void TeklifDetay(int logref)
    {
        navigation.NavigateTo("/stek_listef_detay/" + logref.ToString());
    }

    public void YeniTeklif()
    {
        navigation.NavigateTo("/stek_listef_ekle");
    }

    private async Task TeklifAra()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            loadingCompleted = false;
            this.StateHasChanged();

            var request = new TeklifRequestDto();
            request.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            request.FirmaId = selectedFirmaDonem.firma_no.Value;
            request.SearchText = header.SearchText;

            var result = await httpClient.PostGetServiceResponseAsync<List<TeklifDto>, TeklifRequestDto>(UrlHelper.TeklifAra, request);
            if (result == null || result.Count == 0)
            {
                Snackbar.Add("Aradığınız kritere göre teklif bulunamadı.", severity: Severity.Warning);
                loadingCompleted = true;
                header.SearchText = string.Empty;
                return;
            }

            loadingCompleted = true;

            teklifler = result;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Beklenmedik bir hata oluştu. Hata Mesajı:" + ex.Message, severity: Severity.Error);
        }

    }

    public async Task TeklifDurumDegistir(int logref, int? admin)
    {
        var opt = new ModalOptions();
        opt.ContentScrollable = true;

        var parameters = new ModalParameters();
        parameters.Add("logRef", logref);

        if (admin.HasValue)
            parameters.Add("admin", admin.Value);

        var teklifDurumForm = modal.Show<TeklifDurumDegistirComponent>("Durum Değiştir", parameters: parameters, options: opt);
        var result = await teklifDurumForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var durumSecim = (TeklifDto)result.Data;
                if (durumSecim.Duruminfo.Equals(TeklifDurum.TeklifRevizyonda))
                    navigation.NavigateTo("/stek_listef_detay/" + durumSecim.Logref);
                else
                    await LoadTeklifler();
            } else
            {
                await LoadTeklifler();
            }
        }
    }

    private async Task CheckUser()
    {

        var kullanici_kodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

        var result = await httpClient.GetServiceResponseAsync<SisKullaniciDto>(UrlHelper.KullaniciGetByKod + "?kod=" + kullanici_kodu);

        if (result != null)
        {
            isAdmin = result.KullaniciYetkiKodu.Equals("ADM");
        }

    }

    private async Task GetUserMenuYetkisi()
    {

        var kullanici_kodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

        var result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=stek_listef&hak_tipi=sel");

        menuGormeYetkisi = result == 1;

        if (menuGormeYetkisi)
        {
            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=stek_listef&hak_tipi=ins");
            menuEklemeYetkisi = result == 1;

            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=stek_listef&hak_tipi=upd");
            menuDegistirmeYetkisi = result == 1;

            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=stek_listef&hak_tipi=del");
            menuSilmeYetkisi = result == 1;
        }

        if (!menuGormeYetkisi)
        {
            _ShowSearchSection = false;
            throw new Exception("Bu sayfayı görüntüleme yetkiniz yoktur");
        }
    }

    public async Task Sil(int logref)
    {
        try
        {
            var modalRes = await ModalManager.ShowConfirmationAsync("Teklif silinecek!", "Silmek istediğinizden emin misiniz?", "Evet", "Hayır");
            if (!modalRes)
                return;

            loadingCompleted = false;
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            var kullanici = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var delete = await httpClient.GetFromJsonAsync<ServiceResponse<bool>>(Utils.UrlHelper.TeklifSil + "?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.Value + "&kullanici=" + kullanici);

            if (delete.Success == false)
                throw new Exception(delete.Message);

            Snackbar.Add("Teklif silindi");

            await LoadTeklifler();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    public async Task TeklifDurumDetay(int logref)
    {
        var opt = new ModalOptions();
        opt.ContentScrollable = true;

        var parameters = new ModalParameters();
        parameters.Add("teklifref", logref);

        var teklifDurumForm = modal.Show<TeklifDurumDetayComponent>("Teklif Durum Geçmişi", parameters: parameters, options: opt);
        var result = await teklifDurumForm.Result;

        if (!result.Cancelled)
        {
        }
    }

    public async Task TeklifKopyalaRevizeEt(TeklifDto teklif)
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem == null)
            throw new Exception("Firma Dönem Seçili değil");

        try
        {
            loadingCompleted = false;

            teklif.Lfirma = selectedFirmaDonem.logo_firma.Value.ToString();
            var request = new TeklifRequestDto();
            request.Teklif = teklif;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;
            request.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.PostAsJsonAsync(UrlHelper.TeklifKaydetRevize, request);

            var response = await result.Content.ReadFromJsonAsync<ServiceResponse<TeklifDto>>();
            if (!response.Success)
                throw new Exception(response.Message);

            //var result = await httpClient.PostGetServiceResponseAsync<TeklifDto, TeklifRequestDto>(UrlHelper.TeklifKaydetRevize, request);

            navigation.NavigateTo("/stek_listef_detay/" + response.Value.Logref);

        }
        catch (ApiException exx)
        {
            Snackbar.Add(exx.Message, severity: Severity.Warning);
            return;
        }
        catch (ClientException e)
        {
            foreach (var item in e.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    private async Task TeklifDetayliAra()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var opt = new ModalOptions();
            opt.ContentScrollable = true;


            var cariForm = modal.Show<Components.Teklif.TeklifDetayliAraComponent>("Detaylı Arama", opt);
            var result = await cariForm.Result;

            if (!result.Cancelled)
            {
                if (result.Data != null)
                {
                    loadingCompleted = false;
                    this.StateHasChanged();

                    var request = (TeklifRequestDto)result.Data;

                    request.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                    request.FirmaId = selectedFirmaDonem.firma_no.Value;
                    request.SearchText = header.SearchText;

                    var response = await httpClient.PostGetServiceResponseAsync<List<TeklifDto>, TeklifRequestDto>(UrlHelper.TeklifAra, request);
                    if (response == null || response.Count == 0)
                    {
                        Snackbar.Add("Aradığınız kritere göre teklif bulunamadı.", severity: Severity.Warning);
                        loadingCompleted = true;
                        return;
                    }
                    loadingCompleted = true;
                    teklifler = response;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Beklenmedik bir hata oluştu. Hata Mesajı:" + ex.Message, severity: Severity.Error);
        }
    }
}
