@page "/stek_listef_ekle"

<EditForm Model="teklif">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form">
        <div class="form-group">
            <label>Ref</label>
            <InputNumber @bind-Value="teklif.Logref" class="form-control" />
        </div>

        <div class="form-group">
            <label>Teklif No</label>
            <InputText @bind-Value="teklif.Teklifno" class="form-control" />
        </div>

        <div class="form-group">
            <label>Cari</label>
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="teklif.LcariKodu" class="form-control" placeholder="Cari Kodu" />
                </div>
                <div class="col">
                    <InputText @bind-Value="teklif.LcariAdi" class="form-control" placeholder="Cari Adı" />
                </div>
                <div class="col">  
                    <SaveButtonComponent Caption="Cari Listesi" OnClick="CariListesiAc" />
                </div>
            </div>

        </div>

        

    </div>

    <div class="form-group">
        <SaveButtonComponent Caption="Kaydet" OnClick="ValidSubmit" />
        <CancelButtonComponent Caption="Vazgeç" OnClick="goBackTeklifList" />
    </div>

</EditForm>


@code {
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    TeklifDto teklif = new TeklifDto();

    protected override async Task OnInitializedAsync()
    {
        await TeklifNoUret();
    }

    public async Task ValidSubmit()
    {
        try
        {
            teklif.Insdate = DateTime.Now;
            teklif.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            teklif.Tarih = teklif.Tarih.HasValue ? teklif.Tarih : DateTime.Now;
            teklif.Saat = teklif.Saat.HasValue ? teklif.Saat : DateTime.Now;

            var result = await httpClient.PostGetServiceResponseAsync<TeklifDto, TeklifDto>("/api/teklif/save", teklif);

            navigation.NavigateTo("/stek_listef_detay/" + result.Logref);

        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task TeklifNoUret()
    {
        var result = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=teklif&keyField=teklifno");
        if (string.IsNullOrEmpty(result) == false)
        {
            teklif.Teklifno = result;
        }

        var result2 = await httpClient.GetServiceResponseAsync<string>("/api/helper/GenerateRef?table=teklif&keyField=logref");
        if (string.IsNullOrEmpty(result) == false)
        {
            teklif.Logref = Convert.ToInt32(result2);
        }
    }

    public void goBackTeklifList()
    {
        navigation.NavigateTo("/stek_listef");
    }

    public async Task CariListesiAc()
    {
        var cariForm = modal.Show<Cari.Cari_Sec>();
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (CariKartDto)result.Data;
                teklif.LcariAdi = cariSecim.Adi;
                teklif.LcariKodu = cariSecim.Kodu;
                teklif.Cariref = cariSecim.Logref;
            }

        }
    }
}
