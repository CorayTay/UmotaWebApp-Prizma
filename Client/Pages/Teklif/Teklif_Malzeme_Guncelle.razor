@page "/stek_listef_detay/{logref:int}"

<div class="card" style="width: 100%;">
    <div class="card-body">
        <h5 class="card-title">Teklif Numarası : @teklif.Teklifno</h5>
         
            <h6 class="card-subtitle mb-2 text-muted">
                Teklif Tarihi : @(teklif.Tarih.HasValue ? teklif.Tarih.Value.ToString("dd.MM.yyyy") : "")
                / Teslim Tarihi : @(teklif.TeslimTarihi.HasValue ? teklif.TeslimTarihi.Value.ToString("dd.MM.yyyy") : "")
            </h6>
         
        <div class="row">
            <div class="col-md-4">

                <p class="card-text">
                    <strong>Firma:</strong> @teklif.Cariadi <br />
                    <strong>İlgili Kişi:</strong> @teklif.IlgiliAdi
                    <br />

                    <strong>Açıklama :</strong> @teklif.Aciklama1 <br />
                    <strong>Proje Adı:</strong> @teklif.Proje <br />
                </p>

            </div>
            <div class="col-md-4">
                <p class="card-text">

                    <strong>Satır Sayısı : </strong> @(_miktar.HasValue ? _miktar.Value : 0)
                    <br /><strong>Teklif Tutar :</strong> @(teklif.Tutarmatrah.HasValue ? teklif.Tutarmatrah.Value : "0")
                    <br /><strong>Teklif Para Birimi : </strong> @(teklif.Dovizdokuid)
                    <br /><strong>Teklif Tutar TL :</strong>@(teklif.Tutarmatrahtl.HasValue ? teklif.Tutarmatrahtl.Value : "0")

                </p>

            </div>
            <div class="col-md-4">
                <p class="card-text">
                    <strong>Satış Temsilcisi : </strong> @teklif.Temsilciadi
                </p>

            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <button class="btn btn-primary" @onclick="Duzenle"><i class="fa fa-edit"></i> Teklif Düzenle</button>
                <button class="btn btn-primary" @onclick="TeklifDetayEkle"><i class="fa fa-plus"></i> Yeni Satır Ekle</button>
            </div>
        </div>

        
    </div>
</div>


<MudTable Items="@teklifDetayList" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<TeklifDetayDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Teklif Satırları</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Satırlarda Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Çizim Kodu</MudTh>
        <MudTh>Poz No</MudTh>
        <MudTh>Stok Kodu</MudTh>
        <MudTh>Stok Adı</MudTh>
        <MudTh>Miktar</MudTh>
        <MudTh>Birim</MudTh>
        <MudTh>Birim Fiyat</MudTh>
        <MudTh>Tutar</MudTh>
        <MudTh>#</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="(() => TeklifDetayGuncelle(context.Logref))" />
        </MudTd>
        <MudTd DataLabel="Çizim Kodu">@context.Cizimkodu</MudTd>
        <MudTd DataLabel="Poz No">@context.Sipnosira</MudTd>
        <MudTd DataLabel="Stok Kodu">@context.Malzkodu</MudTd>
        <MudTd DataLabel="Stok Adı">@context.Malzadi</MudTd>
        <MudTd DataLabel="Miktar">@context.Miktar</MudTd>
        <MudTd DataLabel="Birim">@context.Birimkodu</MudTd>
        <MudTd DataLabel="Birim Fiyat">@context.Fiyat</MudTd>
        <MudTd DataLabel="Tutar">@context.Tutar</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" @onclick="(() => DeleteTeklifDetay(context.Logref))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




@code {
    [Parameter]
    public int logref { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public TeklifDto teklif = new TeklifDto();

    public List<TeklifDetayDto> teklifDetayList { get; set; }

    private string _searchString = "";
    private bool _sortNameByLength;

    private double? _miktar = 0;

    private bool FilterFunc1(TeklifDetayDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(TeklifDetayDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LstokAdi != null && element.LstokAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LstokKodu != null && element.LstokKodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTeklifData();
        await LoadTeklifDetayData();
    }

    private async Task LoadTeklifDetayData()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var result = await httpClient.GetServiceResponseAsync<List<TeklifDetayDto>>("/api/teklifdetay/list?teklifRef=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.Value);
            if (result != null)
            {
                teklifDetayList = result.OrderBy(x => x.Sipnosira).ToList();
                _miktar = teklifDetayList.Count();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task LoadTeklifData()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<TeklifDto>(UrlHelper.TeklifGetir + "?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no);
            if (result != null)
            {
                teklif = result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public async Task Duzenle()
    {

        try
        {
            navigation.NavigateTo("/stek_listef_guncelle/" + logref);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private async Task Kapat()
    {
        await ModalInstance.CloseAsync();
    }

    public void TeklifDetayEkle()
    {
        try
        {
            navigation.NavigateTo("/teklifdetay_ekle/" + logref);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void TeklifDetayGuncelle(int logref)
    {
        try
        {
            navigation.NavigateTo("/teklifdetay_guncelle/" + logref);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public async Task DeleteTeklifDetay(int logref)
    {
        try
        {
            var modalRes = await ModalManager.ShowConfirmationAsync("Teklif Detay Silinecek!", "Teklif Detayını silmek istediğinizden emin misiniz?","Evet","Hayır");
            if (!modalRes)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);


            var delete = await httpClient.GetServiceResponseAsync<bool>("/api/teklifdetay/delete?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.Value);

            Snackbar.Add("Teklif detayı silindi");

            await LoadTeklifDetayData();
            await LoadTeklifData();
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }
}
