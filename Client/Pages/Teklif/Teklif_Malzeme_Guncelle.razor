@page "/stek_listef_detay/{logref:int}"

<div class="card" style="width: 100%;">
    <div class="card-body">
        <h5 class="card-title">Teklif Numarası : @teklif.Teklifno</h5>
        <div class="row">
            <div class="col-md-6">
                <h6 class="card-subtitle mb-2 text-muted">
                    Teklif Tarihi : @(teklif.Tarih.HasValue ? teklif.Tarih.Value.ToString("dd.MM.yyyy") : "")
                    / Teslim Tarihi : @(teklif.TeslimTarihi.HasValue ? teklif.TeslimTarihi.Value.ToString("dd.MM.yyyy") : "")
                </h6>
                <p class="card-text">
                    <strong>Proje Adı:</strong> @teklif.Proje
                    <strong>İlgili Kişi:</strong> @teklif.IlgiliAdi
                    <strong>Açıklama :</strong> @teklif.Aciklama1
                </p>

            </div>
            <div class="col-md-6">
                <p class="card-text">
                    <strong>Teklif Tutar :</strong> @(teklif.Tutar.HasValue ? teklif.Tutar.Value : "0")
                    <strong>Miktar : </strong> @(_miktar.HasValue ? _miktar.Value : 0)
                </p>

            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <button class="btn btn-primary" @onclick="Duzenle"><i class="fa fa-edit"></i> Düzenle</button>
                <button class="btn btn-primary" @onclick="TeklifDetayEkle"><i class="fa fa-plus"></i> Malzeme Ekle</button>
            </div>
        </div>

        
    </div>
</div>


<MudTable Items="@teklifDetayList" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<TeklifDetayDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Teklif Detay Listesi</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Teklif Detay Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Çizim Kodu</MudTh>
        <MudTh>Stok Kodu</MudTh>
        <MudTh>Stok Adı</MudTh>
        <MudTh>Miktar</MudTh>
        <MudTh>Birim Fiyat</MudTh>
        <MudTh>Tutar</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Çizim Kodu">@context.Cizimkodu</MudTd>
        <MudTd DataLabel="Stok Kodu">@context.LstokKodu</MudTd>
        <MudTd DataLabel="Stok Adı">@context.LstokAdi</MudTd>
        <MudTd DataLabel="Miktar">@context.Miktar</MudTd>
        <MudTd DataLabel="Birim Fiyat">@context.Fiyat</MudTd>
        <MudTd DataLabel="Tutar">@context.Tutar</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




@code {
    [Parameter]
    public int logref { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public TeklifDto teklif = new TeklifDto();

    public List<TeklifDetayDto> teklifDetayList { get; set; }

    private string _searchString = "";
    private bool _sortNameByLength;

    private double? _miktar = 0;

    private bool FilterFunc1(TeklifDetayDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(TeklifDetayDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LstokAdi != null && element.LstokAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LstokKodu != null && element.LstokKodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTeklifData();
        await LoadTeklifDetayData();
    }

    private async Task LoadTeklifDetayData()
    {
        var result = await httpClient.GetServiceResponseAsync<List<TeklifDetayDto>>("/api/teklifdetay/list?teklifRef=" + logref);
        if (result != null)
        {
            teklifDetayList = result.OrderByDescending(x => x.Insdate).ToList();
            _miktar = teklifDetayList.Sum(x => x.Miktar);
        }
    }

    private async Task LoadTeklifData()
    {
        var result = await httpClient.GetServiceResponseAsync<TeklifDto>("/api/teklif/get?logref=" + logref);
        if (result != null)
        {
            teklif = result;
        }
    }

    public async Task Duzenle()
    {

        modalParameters = new ModalParameters();
        modalParameters.Add("logRef", logref);

        var duzenleForm = modal.Show<TeklifEkleGuncelleComponent>("Teklif Güncelle", parameters: modalParameters);

        var result = await duzenleForm.Result;

        await LoadTeklifData();

    }

    public async Task TeklifDetayEkle()
    {
        modalParameters = new ModalParameters();
        modalParameters.Add("teklifRef", logref);

        var malzKartForm = modal.Show<TeklifDetayEkleGuncelleComponent>("Teklif Detay", parameters: modalParameters);
        var result = await malzKartForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var secim = (TeklifDetayDto)result.Data;

                Snackbar.Add("Malzeme Kartı eklendi : " + secim.LstokAdi);

                await LoadTeklifData();
                await LoadTeklifDetayData();
            }

        }
    }
}
