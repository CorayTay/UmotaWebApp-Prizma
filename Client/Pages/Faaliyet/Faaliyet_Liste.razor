@page "/faaliyet_listef"

<HeaderSearchBar header="header" onAddNewButtonClicked="YeniKayitEkle"
                 ShowButtons="false"
                 onDoneButtonClicked="FaaliyetAra" ShowSearchSection="_ShowSearchSection"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@listItems" Dense="true" Hover="true" Loading="@(loadingCompleted == false)" Bordered="true" Striped="true" Filter="new Func<FaaliyetDto,bool>(FilterFunc1)">
    <ToolBarContent>
        @if (menuEklemeYetkisi)
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="YeniKayitEkle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        }
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Faaliyet Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Faaliyet Türü</MudTh>
        <MudTh>Tarih</MudTh>
        <MudTh>Kaydı Giren</MudTh>
        <MudTh>Kayıt Tarihi</MudTh>
        <MudTh>Konu</MudTh>
        <MudTh>Cari Adı</MudTh>
        <MudTh>İlgili Kişi</MudTh>
        <MudTh>İlçe</MudTh>
        <MudTh>İl</MudTh>
        <MudTh>Ürün Grubu</MudTh>
        <MudTh>Yapılanlar</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (menuDegistirmeYetkisi)
            {
                <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => Degistir(context.Logref))" Size="Size.Medium" />
            }
        </MudTd>
        <MudTd DataLabel="Faaliyet Türü">@(context.Islemturu == 0 ? "Planlanan" : "Gerçekleşen")</MudTd>
        <MudTd DataLabel="Tarih">@context.Tarih</MudTd>
        <MudTd DataLabel="Giren">@context.Giren</MudTd>
        <MudTd DataLabel="Kayıt Tarihi">@context.Insdate</MudTd>
        <MudTd DataLabel="Konu">@context.Konu @((context.IslemSayisi != null && context.IslemSayisi > 0) ? "("+context.IslemSayisi+ ")" : "") </MudTd>
        <MudTd DataLabel="Cari Adı">@context.Cariadi</MudTd>
        <MudTd DataLabel="İlgili Kişi">@context.Kisiadi</MudTd>
        <MudTd DataLabel="İlçe">@context.Ilce</MudTd>
        <MudTd DataLabel="il">@context.Il</MudTd>
        <MudTd DataLabel="Ürün Grubu">@context.Grup1</MudTd>

        <MudTd DataLabel="Yapılanlar">

            <MudTooltip Text="@context.Yapilanlar" Arrow="true" Placement="Placement.Top">
                @context.Yapilanlar.MinimizeString(50)
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>


@code {

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    public List<FaaliyetDto> listItems { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    private string _searchString = "";
    private bool _sortNameByLength;
    private bool _ShowSearchSection = true;

    private bool loadingCompleted = false;

    private bool isAdmin { get; set; }

    private bool menuGormeYetkisi { get; set; }
    private bool menuEklemeYetkisi { get; set; }

    private bool menuDegistirmeYetkisi { get; set; }

    private bool FilterFunc1(FaaliyetDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(FaaliyetDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Konu != null && element.Konu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cariadi != null && element.Cariadi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kisiadi != null && element.Kisiadi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kisiadi2 != null && element.Kisiadi2.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kisiadi3 != null && element.Kisiadi3.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kisiadi4 != null && element.Kisiadi4.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kisiadi5 != null && element.Kisiadi5.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Grup1 != null && element.Grup1.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Grup2 != null && element.Grup2.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Grup3 != null && element.Grup3.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Grup4 != null && element.Grup4.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Grup5 != null && element.Grup5.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Insuser != null && element.Insuser.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Yapilanlar != null && element.Yapilanlar.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;



        return false;
    }

    private void YetkiControl()
    {
        menuGormeYetkisi = isAdmin ? isAdmin : false;
        menuEklemeYetkisi = isAdmin ? isAdmin : false;
        menuDegistirmeYetkisi = isAdmin ? isAdmin : false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            header.HeaderText = "Faaliyet Listesi";

            YetkiControl();

            if (!isAdmin)
                await GetUserMenuYetkisi();

            await LoadList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task LoadList()
    {
        loadingCompleted = false;
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
        var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
        listItems = await httpClient.GetServiceResponseAsync<List<FaaliyetDto>>(UrlHelper.FaaliyetListesi + "?firmaId=" + selectedFirmaDonem.firma_no + "&kullanicikodu=" + kullanicikodu);
        loadingCompleted = true;
        listItems = listItems.OrderByDescending(i => i.Insdate).ToList();
    }

    public void Degistir(int logref)
    {
        navigation.NavigateTo("/faaliyet_listef_guncelle/" + logref.ToString());
    }

    public void YeniKayitEkle()
    {
        navigation.NavigateTo("/faaliyet_listef_ekle");
    }

    private async Task FaaliyetAra()
    {

        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem == null)
            throw new Exception("Firma Dönem Seçili değil");

        loadingCompleted = false;

        var request = new FaaliyetRequestDto();
        request.Aranacak = header.SearchText;
        request.FirmaId = selectedFirmaDonem.firma_no.Value;
        request.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

        var result = await httpClient.PostGetServiceResponseAsync<List<FaaliyetDto>, FaaliyetRequestDto>(UrlHelper.FaaliyetAra, request);
        if (result == null || result.Count == 0)
        {
            await ModalManager.ShowMessageAsync("Arama", "Aradığınız kritere uygun kayıt bulunamadı.\n Lütfen detaylı aramayı seçiniz");
            loadingCompleted = true;
            return;
        }

        listItems = result;
        loadingCompleted = true;
    }

    private async Task GetUserMenuYetkisi()
    {

        var kullanici_kodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

        var result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=faaliyet_listef&hak_tipi=sel");

        menuGormeYetkisi = result == 1;

        if (menuGormeYetkisi)
        {
            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=faaliyet_listef&hak_tipi=ins");
            menuEklemeYetkisi = result == 1;

            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanici_kodu + "&menu_dfm=faaliyet_listef&hak_tipi=upd");
            menuDegistirmeYetkisi = result == 1;
        }

        if (!menuGormeYetkisi)
        {
            _ShowSearchSection = false;
            throw new Exception("Bu sayfayı görüntüleme yetkiniz yoktur");
        }


    }

}
