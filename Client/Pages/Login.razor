@page "/login"
@layout UmotaWebApp.Client.Shared.EmptyLayout


<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-4 col-xl-3">


            <img src="/img/logo.png" />

            <EditForm Model="@request" OnValidSubmit="LoginProcess">
                <DataAnnotationsValidator />

                @if (_firstStep)
                {

                    <div class="form-group">
                        <input @bind-value="request.Kod" class="form-control form-control-lg" type="text" placeholder="Kullanıcı Kodu" />
                    </div>

                    <div class="form-group">
                        <input @bind-value="request.Sifre" class="form-control form-control-lg" type="password" placeholder="Şifre" />
                    </div>

                    <div class="form-group">
                        <button class="btn btn-info btn-block">Giriş</button>
                    </div>

                }

                @if (_showProgress)
                {
                    <div class="form-group">
                        <div class="row">
                            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                        </div>
                    </div>

                }

                @if (_secondStep)
                {
                    <div class="form-group">
                        <select class="form-control" @bind="selectedFirmaDonem">
                            <option value="-1" selected>@selectBoxDesc</option>
                            @if (firmalar != null)
                            {
                                @foreach (var item in firmalar)
                                {
                                    <option value="@item.logref">@item.aciklama</option>
                                }
                            }

                        </select>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-info btn-block" @onclick="SaveRedirect">Devam Et</button>
                    </div>

                }


            </EditForm>

        </div>

    </div>
</div>


@code {

    [Inject]
    HttpClient client { get; set; }

    [Inject]
    ModalManager modalManager { get; set; }

    [Inject]
    NavigationManager navManager { get; set; }

    [Inject]
    ILocalStorageService LocalStorage { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private SisKullaniciLoginRequestDto request = new SisKullaniciLoginRequestDto();
    private List<SisFirmaDonemDto> firmalar = null;
    private int selectedFirmaDonem = -1;

    private string selectBoxDesc = "Yükleniyor...";

    private SisKullaniciLoginResponseDto response { get; set; }

    private bool _firstStep = true;
    private bool _secondStep = false;
    private bool _showProgress = false;

    private async Task LoadFirmaDonem()
    {
        try
        {
            var result = await client.GetServiceResponseAsync<List<SisFirmaDonemDto>>("/api/FirmaDonem/List?kullanici_kodu=" + request.Kod);

            if (result != null)
            {
                firmalar = result;
                selectBoxDesc = "Lütfen firma-dönem seçiniz";
            }
            else
            {
                await modalManager.ShowMessageAsync("Hata", "Firma Dönem bilgisi çekilemedi");
            }
        }
        catch (Exception ex)
        {
            await modalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    private async Task SaveRedirect()
    {
        try
        {
            if (selectedFirmaDonem == -1)
            {
                await modalManager.ShowMessageAsync("Hata", "Firma Seçmeniz Gerekmektedir.");
                return;
            }

            await LocalStorage.SetItemAsync(Consts.Token, response.ApiToken);
            await LocalStorage.SetItemAsync<string>(Consts.KullaniciKodu, response.KullaniciDto.KullaniciKodu);

            var firma = firmalar.Where(x => x.logref == selectedFirmaDonem).SingleOrDefault();

            await LocalStorage.SetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem, firma);

            (AuthenticationStateProvider as AuthStateProvider).NotifyUserLogin(response.KullaniciDto.KullaniciKodu);

            //client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", response.ApiToken);

            var authStr = $"Bearer " + response.ApiToken.Replace("\"", "");
            authStr = authStr.Replace("\"", "");
            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("Authorization", authStr);

            navManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await modalManager.ShowMessageAsync("Hata", ex.Message);
        }

    }


    private async Task LoginProcess()
    {
        try
        {
            _showProgress = true;

            var httpReqResponse = await client.PostAsJsonAsync(UrlHelper.Login, request);

            if (httpReqResponse.IsSuccessStatusCode)
            {
                var res = await httpReqResponse.Content.ReadFromJsonAsync<ServiceResponse<SisKullaniciLoginResponseDto>>();

                if (res.Success)
                {

                    response = res.Value;

                    await LoadFirmaDonem();

                    if (firmalar == null)
                    {
                        await modalManager.ShowMessageAsync("Hata", "Giriş yetkiniz bulunmamaktadır");
                        return;
                    }

                    _showProgress = false;
                    _firstStep = false;
                    _secondStep = true;
                }
                else
                {
                    await modalManager.ShowMessageAsync("Hata", res.Message);
                }
            }
        }
        catch (Exception ex)
        {
            _showProgress = false;
            await modalManager.ShowMessageAsync("Hata", ex.Message);

        }

    }


}
