@page "/kullanici_liste"

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

@if (isAdmin == false)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Bu sayfayı görüntüleme yetkiniz yok</MudAlert>
}

<MudTable Items="@kullanicilar" Dense="true" Hover="true" RowsPerPage="100" Bordered="true" Striped="true" Filter="new Func<SisKullaniciDto,bool>(FilterFunc1)">
    <ToolBarContent>
        @if (isAdmin)
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="Ekle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        }
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Kullanıcı Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Kullanıcı Kodu</MudTh>
        <MudTh>Kullanıcı Adı</MudTh>
        <MudTh>Yetki</MudTh>
        <MudTh>Grubu</MudTh>
        <MudTh>E-posta Adresi</MudTh>
        <MudTh>Logo Kullanıcı Adı</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (isAdmin)
            {
                <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => Guncelle(context.KullaniciKodu))" Size="Size.Medium" />
            }
        </MudTd>
        <MudTd DataLabel="Kodu">@context.KullaniciKodu</MudTd>
        <MudTd DataLabel="Adı">@context.KullaniciAdi</MudTd>
        <MudTd DataLabel="Yetki">@context.KullaniciYetkiAdi</MudTd>
        <MudTd DataLabel="Grup">@context.KullaniciMenuProfilAdi</MudTd>
        <MudTd DataLabel="e-Posta">@context.MailAdres</MudTd>
        <MudTd DataLabel="Logo Kullanıcı">@context.LogoUsername</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code {

    [Inject]
    IModalService modalService { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public List<SisKullaniciDto> kullanicilar { get; set; }
    private bool loadingCompleted = false;
    private bool isAdmin = true;
    private string _searchString;
    private bool _sortNameByLength;

    private bool FilterFunc1(SisKullaniciDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(SisKullaniciDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.KullaniciKodu != null && element.KullaniciKodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.KullaniciAdi != null && element.KullaniciAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await KullaniciYetkileriGetir();
        await LoadKullanicilar();
        loadingCompleted = true;
    }

    private async Task LoadKullanicilar()
    {
        if (!isAdmin)
            return;

        kullanicilar = await httpClient.GetServiceResponseAsync<List<SisKullaniciDto>>("/api/kullanici/list");
    }

    public void Guncelle(string kullanicikodu)
    {
        navigation.NavigateTo("/kullanici_guncelle/" + kullanicikodu);
    }

    public void Ekle()
    {
        navigation.NavigateTo("/kullanici_ekle");
    }

    public async Task KullaniciYetkileriGetir()
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var resultkul = await httpClient.GetServiceResponseAsync<SisKullaniciDto>(UrlHelper.KullaniciGetByKod + "?kod=" + kullanicikodu);

            if (resultkul != null)
                isAdmin = resultkul.KullaniciYetkiKodu.Equals("ADM");
            else
                isAdmin = false;

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

}
