@page "/malzeme_listef"

<Malzeme_Detayli_Ara header="detayAraBar" onSearchButtonClicked="Search"></Malzeme_Detayli_Ara>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@list" RowsPerPage="100" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<MalzemeKartDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="Ekle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı</MudTh>
        <MudTh>Adı 2</MudTh>
        <MudTh>Birim</MudTh>
        <MudTh>Marka Kodu</MudTh>
        <MudTh>Menşei</MudTh>
        <MudTh>Grup Kodu</MudTh>
        <MudTh>Tedarikçi</MudTh>
        <MudTh>Kdv %</MudTh>
        <MudTh>Maliyet Fiyatı</MudTh>
        <MudTh>Maliyet Döviz</MudTh>
        <MudTh>Satış Fiyatı</MudTh>
        <MudTh>Satış Döviz</MudTh>
        <MudTh>Logo Kodu</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => Guncelle(context.Logref))" Size="Size.Medium" />
        </MudTd>
        <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
        <MudTd DataLabel="Adı">@context.Adi</MudTd>
        <MudTd DataLabel="Adı 2">@context.Adi3</MudTd>
        <MudTd DataLabel="Birim">@context.Birim</MudTd>
        <MudTd DataLabel="Marka">@context.Marka</MudTd>
        <MudTd DataLabel="Menşei">@context.Mensei</MudTd>
        <MudTd DataLabel="Grup">@context.Grupkodu</MudTd>
        <MudTd DataLabel="Tedarakçi">@context.TedarikciAdi</MudTd>
        <MudTd DataLabel="KDV">@context.Kdv</MudTd>
        <MudTd DataLabel="Maliyet">@context.Alfiyat</MudTd>
        <MudTd DataLabel="Maliyet Döviz">@context.AlfiyatDov</MudTd>
        <MudTd DataLabel="Satış">@context.Satfiyat</MudTd>
        <MudTd DataLabel="Satış Döviz">@context.SatfiyatDov</MudTd>
        <MudTd DataLabel="Logo Kodu">@context.Logokodu</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public MalzemeStokRequestDto detayAraBar = new MalzemeStokRequestDto();

    public List<MalzemeKartDto> list = new List<MalzemeKartDto>();
    private string _searchString;
    private bool _sortNameByLength;
    private bool loadingCompleted = false;

    private bool FilterFunc1(MalzemeKartDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(MalzemeKartDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Adi != null && element.Adi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kodu != null && element.Kodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Marka != null && element.Marka.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        detayAraBar.HeaderText = "CRM Malzeme Listesi";

        await LoadList();
        loadingCompleted = true;
    }

    public async Task Search()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            loadingCompleted = false;
            var request = new MalzemeKartRequestDto();
            request.FirmaId = selectedFirmaDonem.firma_no.Value;
            if (!string.IsNullOrWhiteSpace(detayAraBar.SearchText))
                request.SearchText = detayAraBar.SearchText;
            if (!string.IsNullOrWhiteSpace(detayAraBar.MalzemeMarka))
                request.Marka = detayAraBar.MalzemeMarka;
            if (!string.IsNullOrWhiteSpace(detayAraBar.MalzemeAdi))
                request.MalzemeAdi = detayAraBar.MalzemeAdi;
            if (!string.IsNullOrWhiteSpace(detayAraBar.MalzemeKodu))
                request.MalzemeKodu = detayAraBar.MalzemeKodu;

            var result = await httpClient.PostGetServiceResponseAsync<List<MalzemeKartDto>, MalzemeKartRequestDto>(UrlHelper.MalzemeKartAra, request);
            list = result;

            if (list == null || list.Count == 0)
            {
                Snackbar.Add("Veri bulunamadı", severity: Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    private async Task LoadList()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            loadingCompleted = false;
            list = await httpClient.GetServiceResponseAsync<List<MalzemeKartDto>>(UrlHelper.MalzemeKartListesi + "?firmaId=" + selectedFirmaDonem.firma_no.Value);
            loadingCompleted = true;
        }
        catch (Exception)
        {
            throw;
        }
    }

    public void Guncelle(int logref)
    {
        navigation.NavigateTo("/malzeme_kartf_guncelle/" + logref);
    }

    public void Ekle()
    {
        navigation.NavigateTo("/malzeme_kartf_ekle");
    }

}
