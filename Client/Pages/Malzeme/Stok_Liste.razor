@page "/stok_listef"

<Malzeme_Detayli_Ara header="detayAraBar" onSearchButtonClicked="Search"></Malzeme_Detayli_Ara>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@stoklar" RowsPerPage="100" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<MalzemeStokDto,bool>(FilterFunc1)">
    <HeaderContent>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı</MudTh>
        <MudTh>Marka</MudTh>
        <MudTh>Birim</MudTh>
        <MudTh>Fiili Miktar</MudTh>
        <MudTh>Rezerv Miktar</MudTh>
        <MudTh>Öneri Sip. Miktar</MudTh>
        <MudTh>Satılabilir Miktar</MudTh>
        <MudTh>Alım Sip. Miktar</MudTh>
        <MudTh>Alım Sip. Termin</MudTh>
        <MudTh>Satış Fiyatı</MudTh>
        <MudTh>Satış Döviz</MudTh>
        @if (@maliyetGorYonetici)
        {
            <MudTh>Alış Fiyatı 1</MudTh>
        }
        @if (@maliyetGorSatisci)
        {
            <MudTh>Alış Fiyatı 2</MudTh>
        }
        <MudTh>Alış Döviz</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Kodu">@context.MalzemeKodu</MudTd>
        <MudTd DataLabel="Adı">@context.MalzemeAdi</MudTd>
        <MudTd DataLabel="Marka">@context.MalzemeMarka</MudTd>
        <MudTd DataLabel="Birim">@context.BirimKodu</MudTd>
        <MudTd DataLabel="Fiili Miktar">@context.StokMiktari</MudTd>
        <MudTd DataLabel="Rezerv Miktar">@context.RezervMiktari</MudTd>
        <MudTd DataLabel="Öneri Sip.Miktar">@context.BekleyenOneriSatisSiparisMiktar</MudTd>
        <MudTd DataLabel="Satılabilir Miktar">@context.StokMiktari2</MudTd>
        <MudTd DataLabel="Alım Sip. Miktar">@context.BekleyenAlimSiparisMiktar</MudTd>
        <MudTd DataLabel="Alım Sip. Termin">@context.BekleyenAlimSiparisTeslimTarihiFormatted</MudTd>
        <MudTd DataLabel="Satış Fiyatı">@context.SatisFiyatiFormatted</MudTd>
        <MudTd DataLabel="Satış Döviz">@context.SatisFiyatiDoviz</MudTd>
        @if (@maliyetGorYonetici)
        {
            <MudTd DataLabel="Alış Fiyatı">@context.AlisFiyatiFormatted</MudTd>
        }
        @if (@maliyetGorSatisci)
        {
            <MudTd DataLabel="Alış Fiyatı">@context.AlisFiyati2Formatted</MudTd>
        }
        <MudTd DataLabel="Alış Döviz">@context.AlisFiyatiDoviz</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public MalzemeStokRequestDto detayAraBar = new MalzemeStokRequestDto();

    public List<MalzemeStokDto> stoklar = new List<MalzemeStokDto>();
    private string _searchString;
    private bool _sortNameByLength;
    private bool loadingCompleted = false;
    private bool maliyetGorYonetici = false;
    private bool maliyetGorSatisci = false;

    private bool FilterFunc1(MalzemeStokDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(MalzemeStokDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.MalzemeAdi != null && element.MalzemeAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MalzemeKodu != null && element.MalzemeKodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MalzemeMarka != null && element.MalzemeMarka.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        detayAraBar.HeaderText = "Stok Listesi";
        await KullaniciYetkileriGetir();

        loadingCompleted = true;
    }

    public async Task Search()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            loadingCompleted = false;
            this.StateHasChanged();
            var request = new MalzemeStokRequestDto();
            request.LogoFirmaNo = selectedFirmaDonem.logo_firma.Value;
            request.LogoDonemNo = selectedFirmaDonem.logo_donem.Value;
            //request.TopRowCount = 100;
            if (!string.IsNullOrWhiteSpace(detayAraBar.SearchText))
                request.SearchText = '%' + detayAraBar.SearchText + '%';
            if (!string.IsNullOrWhiteSpace(detayAraBar.MalzemeMarka))
                request.MalzemeMarka = '%' + detayAraBar.MalzemeMarka + '%';
            if (!string.IsNullOrWhiteSpace(detayAraBar.MalzemeAdi))
                request.MalzemeAdi = '%' + detayAraBar.MalzemeAdi + '%';
            if (!string.IsNullOrWhiteSpace(detayAraBar.MalzemeKodu))
                request.MalzemeKodu = '%' + detayAraBar.MalzemeKodu + '%';

            var result = await httpClient.PostGetServiceResponseAsync<List<MalzemeStokDto>, MalzemeStokRequestDto>(UrlHelper.MalzemeStokGetir, request);
            stoklar = result;

            if (stoklar == null || stoklar.Count == 0)
            {
                Snackbar.Add("Veri bulunamadı", severity: Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    private async Task LoadList()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            loadingCompleted = false;
            var request = new MalzemeStokRequestDto();
            request.LogoFirmaNo = selectedFirmaDonem.logo_firma.Value;
            request.LogoDonemNo = selectedFirmaDonem.logo_donem.Value;
            request.TopRowCount = 100;
            var result = await httpClient.PostGetServiceResponseAsync<List<MalzemeStokDto>, MalzemeStokRequestDto>(UrlHelper.MalzemeStokGetir, request);
            stoklar = result;
            loadingCompleted = true;
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task KullaniciYetkileriGetir()
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.GetKullaniciYetkisi + "?kullanicikodu=" + kullanicikodu + "&yetkikodu=" + KullaniciYetkiKodlari.TeklifteMaliyet1GorebilsinYoNETiCi);

            maliyetGorYonetici = result == 1;

            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.GetKullaniciYetkisi + "?kullanicikodu=" + kullanicikodu + "&yetkikodu=" + KullaniciYetkiKodlari.TeklifteMaliyet2GorebilsinPersonel);

            maliyetGorSatisci = result == 1;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }
}
