@page "/malzeme_sec"

<div class="container">
    <EditForm Model="malzemeKart" OnValidSubmit="MalzemeBul">
        <div class="form">

            <div class="form-group">

                <div class="row">
                    <div class="col-md-4">
                        <InputText @bind-Value="malzemeKart.Adi" class="form-control" placeholder="Adı" />
                    </div>
                    <div class="col-md-4">
                        <InputText @bind-Value="malzemeKart.Marka" class="form-control" placeholder="Marka" />
                    </div>
                    <div class="col-md-4">
                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FindInPage"
                                   OnClick="MalzemeBul" Color="Color.Info" Size="Size.Medium">@ButonText</MudButton>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>


            <MudTable Items="@malzemeKarts" FixedFooter="true" FixedHeader="true" Dense="true" Hover="true" Bordered="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Malzeme Kart Listesi</MudText>

                </ToolBarContent>
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Kodu</MudTh>
                    <MudTh>Adı</MudTh>
                    <MudTh>Marka</MudTh>
                    <MudTh>Menşei</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudFab Color="Color.Transparent" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="(() => MalzemeKartSec(context.Logref))" />
                    </MudTd>
                    <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
                    <MudTd DataLabel="Adı">@context.Adi</MudTd>
                    <MudTd DataLabel="Marka">@context.Descr</MudTd>
                    <MudTd DataLabel="Menşei">@context.Definition</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
                </PagerContent>
            </MudTable>


            @if (_searchStarted)
            {
                <MudProgressCircular Color="Color.Success" Indeterminate="true" />
            }
        </div>


@code
{
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public List<MalzemeKartDto> malzemeKarts { get; set; }

    public MalzemeKartDto malzemeKart = new MalzemeKartDto();

    public string ResultText { get; set; }
    public string ButonText = "Ara";

    private string _searchStringMalzeme = "";
    private bool _sortNameByLength;
    private bool _searchStarted = false;

    private async Task LoadMalzemeKartList()
    {
        _searchStarted = true;
        malzemeKarts = await httpClient.GetServiceResponseAsync<List<MalzemeKartDto>>("/api/malzemekart/list");
        _searchStarted = false;
    }


    public async Task MalzemeKartSec(int logref)
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var request = new MalzemeKartRequestDto();
            request.MalzemeKart = malzemeKart;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var mkart = await httpClient.GetServiceResponseAsync<MalzemeKartDto>(UrlHelper.MalzemeKartGetir + "?logref=" + logref + "&firmaId=" + request.FirmaId);

            if (mkart != null)
            {
                modalParameters = new ModalParameters();
                modalParameters.Add("secim", mkart);
                await ModalInstance.CloseAsync(ModalResult.Ok<MalzemeKartDto>(mkart));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task MalzemeBul()
    {
        try
        {
            if (string.IsNullOrEmpty(malzemeKart.Adi) && string.IsNullOrEmpty(malzemeKart.Marka))
            {
                throw new Exception(Utils.Mesajlar.MetinGir);
            }
            ButonText = "Aranıyor...";

            _searchStarted = true;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var request = new MalzemeKartRequestDto();
            request.MalzemeKart = malzemeKart;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            malzemeKarts = await httpClient.PostGetServiceResponseAsync<List<MalzemeKartDto>, MalzemeKartRequestDto>(UrlHelper.MalzemeKartAra, request);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _searchStarted = false;
            ButonText = "Ara";
        }
    }

}