@page "/malzeme_sec"


<MudTable Items="@malzemeKarts" FixedFooter="true" FixedHeader="true" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<MalzemeKartDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Malzeme Kart Listesi</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchStringMalzeme" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı</MudTh>
        <MudTh>Menşei</MudTh>
        <MudTh>Özel Kod</MudTh>
        <MudTh>Alış Fiyatı</MudTh>
        <MudTh>Satış Fiyatı</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudFab Color="Color.Transparent" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="(() => MalzemeKartSec(context.Logref))" />
        </MudTd>
        <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
        <MudTd DataLabel="Adı">@context.Adi</MudTd>
        <MudTd DataLabel="Menşei">@context.Mensei</MudTd>
        <MudTd DataLabel="Özel Kod">@context.Ozelkod</MudTd>
        <MudTd DataLabel="Alış Fiyatı">@context.Alfiyat</MudTd>
        <MudTd DataLabel="Satış Fiyatı">@context.Satfiyat</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@if (_searchStarted)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}

@code
{
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }


    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    public List<MalzemeKartDto> malzemeKarts { get; set; }

    public MalzemeKartDto malzemeKart = new MalzemeKartDto();

    public string ResultText { get; set; }

    private string _searchStringMalzeme = "";
    private bool _sortNameByLength;
    private bool _searchStarted = false;

    private bool FilterFunc1(MalzemeKartDto element) => FilterFunc(element, _searchStringMalzeme);

    private bool FilterFunc(MalzemeKartDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Kodu != null && element.Kodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Adi != null && element.Adi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Ozelkod != null && element.Mensei != null
            && $"{element.Ozelkod} {element.Mensei} ".Contains(searchString))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMalzemeKartList();
    }

    private async Task LoadMalzemeKartList()
    {
        _searchStarted = true;
        malzemeKarts = await httpClient.GetServiceResponseAsync<List<MalzemeKartDto>>("/api/malzemekart/list");
        _searchStarted = false;
    }


    public async Task MalzemeKartSec(int logref)
    {
        var mkart = await httpClient.GetServiceResponseAsync<MalzemeKartDto>("/api/malzemekart/get?logref=" + logref);
        if (mkart != null)
        {
            modalParameters = new ModalParameters();
            modalParameters.Add("secim", mkart);
            await ModalInstance.CloseAsync(ModalResult.Ok<MalzemeKartDto>(mkart));
        }
    }

}