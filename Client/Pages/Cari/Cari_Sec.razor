@page "/cari_sec"


<EditForm Model="cari" OnInvalidSubmit="CariBul">
    <div class="form">

        <div class="form-group">

            <div class="row">
                <div class="col-md-4">
                    <InputText @bind-Value="cari.Adi" class="form-control" />
                </div>
                <div class="col-md-8">
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FindInPage"
                               OnClick="CariBul" Color="Color.Primary">Cari Bul</MudButton>
                </div>
            </div>

        </div>

    </div>
</EditForm>


@if (string.IsNullOrEmpty(ResultText) == false)
{
    <div class="alert alert-warning" role="alert">
        @ResultText
    </div>
}

@if (_searchStarted)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}

<MudTable Items="@cariler" FixedFooter="true" FixedHeader="true" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<CariKartDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cari Listesi</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı</MudTh>
        <MudTh>İlçe</MudTh>
        <MudTh>İl</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudFab Color="Color.Transparent" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="(() => CariSec(context.Kodu))" />
        </MudTd>
        <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
        <MudTd DataLabel="Adı">@context.Adi</MudTd>
        <MudTd DataLabel="İlçe">@context.Ilce</MudTd>
        <MudTd DataLabel="Şehir">@context.Il</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }


    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    public List<CariKartDto> cariler { get; set; }

    public CariKartDto cari = new CariKartDto();

    private string _searchString = "";
    private bool _sortNameByLength;
    private bool _searchStarted = false;

    private bool FilterFunc1(CariKartDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(CariKartDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Kodu != null && element.Kodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Adi != null && element.Adi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Ozelkod != null
            && $"{element.Ozelkod}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public string ResultText { get; set; }

    private async Task LoadCariler()
    {
        cariler = await httpClient.GetServiceResponseAsync<List<CariKartDto>>("/api/carikart/list");
        cariler = cariler.OrderByDescending(i => i.Insdate).ToList();
    }

    public async Task CariBul()
    {
        _searchStarted = true;
        ResultText = string.Empty;
        cariler = await httpClient.PostGetServiceResponseAsync<List<CariKartDto>, CariKartDto>("/api/carikart/search", cari);

        if (cariler.Count == 0)
        {
            ResultText = string.Format(@"'{0}' aradığınız cari bulunamadı", cari.Adi);
        }
        _searchStarted = false;
    }

    public async Task CariSec(string kod)
    {
        var cari = await httpClient.GetServiceResponseAsync<CariKartDto>("/api/carikart/getByKod?kod=" + kod);
        if (cari != null)
        {
            modalParameters = new ModalParameters();
            modalParameters.Add("secim", cari);
            await ModalInstance.CloseAsync(ModalResult.Ok<CariKartDto>(cari));
        }
    }

}

