@page "/kisi_listef"

<HeaderSearchBar header="header" onAddNewButtonClicked="CreateCariKart" onDoneButtonClicked="HeaderSearch"
                 ShowButtons="false"
                 ShowSearchSection="true"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@cariler" FixedHeader="true" Height="500px" Dense="true" Hover="true" RowsPerPage="100" Bordered="true" Striped="true" Filter="new Func<KisilerDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="CreateCariKart" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        @*<MudSpacer />*@
        @*<MudTextField @bind-Value="_searchString" Placeholder="Cari Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Kişi Adı</MudTh>
        <MudTh>Firma Adı</MudTh>
        <MudTh>Bölüm</MudTh>
        <MudTh>Pozisyon</MudTh>
        <MudTh>Cep Telefonu</MudTh>
        <MudTh>İş Telefonu</MudTh>
        <MudTh>E-posta</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
        <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => CariKartGuncelle(context.Logref))" Size="Size.Medium" />
        </MudTd>
        <MudTd DataLabel="Kişi Adı">@context.Tamadi</MudTd>
        <MudTd DataLabel="Firma Adı">@context.Cariadi</MudTd>
        <MudTd DataLabel="Bölüm">@context.Bolum</MudTd>
        <MudTd DataLabel="Pozisyon">@context.Pozisyon</MudTd>
        <MudTd DataLabel="Cep Telefonu">@context.Ceptel</MudTd>
        <MudTd DataLabel="İş Telefonu">@context.Istel</MudTd>
        <MudTd DataLabel="E-posta">@context.Mail</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    public List<KisilerDto> cariler = new List<KisilerDto>();
    private string _searchString;
    private bool _sortNameByLength;
    private bool loadingCompleted = false;

    private bool FilterFunc1(KisilerDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(KisilerDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Tamadi != null && element.Tamadi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cariadi != null && element.Cariadi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Bolum != null && element.Bolum.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pozisyon != null && element.Pozisyon.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Kişiler";
        await LoadCariler();
    }

    public async Task HeaderSearch()
    {
        try
        {
            loadingCompleted = false;
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");


            var request = new KisilerRequestDto();
            request.SearchText = header.SearchText;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostGetServiceResponseAsync<List<KisilerDto>, KisilerRequestDto>(UrlHelper.KisiAra, request);
            cariler = result;
            loadingCompleted = true;

            if (cariler == null || cariler.Count == 0)
            {
                Snackbar.Add(string.Format("{0} için sonuç bulunamadı", header.SearchText), severity: Severity.Warning);
                loadingCompleted = true;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task LoadCariler()
    {
        try
        {
            loadingCompleted = false;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            cariler = await httpClient.GetServiceResponseAsync<List<KisilerDto>>(UrlHelper.KisiListesi + "?firmaId=" + selectedFirmaDonem.firma_no.Value);
            loadingCompleted = true;
        }
        catch (Exception)
        {
            throw;
        }
    }

    public void CariKartGuncelle(int logref)
    {
        navigation.NavigateTo("/kisi_guncelle/" + logref);
    }

    public void CreateCariKart()
    {
        navigation.NavigateTo("/kisi_ekle");
    }

}
