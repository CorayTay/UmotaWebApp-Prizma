@page "/r_carilistef"

<HeaderSearchBar header="header" onAddNewButtonClicked="CreateCariKart" onDoneButtonClicked="HeaderSearch"
                 ShowButtons="false"
                 ShowSearchSection="true"></HeaderSearchBar>

<MudTable Items="@cariler" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<CariKartDto,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="CreateCariKart" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Cari Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Adı</MudTh>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı 2</MudTh>
        <MudTh>Adres 1</MudTh>
        <MudTh>İlçe</MudTh>
        <MudTh>Şehir</MudTh>
        <MudTh>Ülke</MudTh>
        <MudTh>Telefon</MudTh>
        
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => CariKartGuncelle(context.Logref))" Size="Size.Medium" />
        </MudTd>
        <MudTd DataLabel="Adı">@context.Adi</MudTd>
        <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
        <MudTd DataLabel="Adı 2">@context.Adi2</MudTd>
        <MudTd DataLabel="Adres 1">@context.Adres1</MudTd>
        <MudTd DataLabel="İlçe">@context.Ilce</MudTd>
        <MudTd DataLabel="Şehir">@context.Il</MudTd>
        <MudTd DataLabel="Ülke">@context.Ulke</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    public List<CariKartDto> cariler = new List<CariKartDto>();
    private string _searchString;
    private bool _sortNameByLength;

    private bool FilterFunc1(CariKartDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(CariKartDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Adi != null && element.Adi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Adi2 != null && element.Adi2.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Ilce != null && element.Il != null && element.Adres1 != null
            && $"{element.Ilce} {element.Il} {element.Adres1}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Cari Kartlar";
        await LoadCariler();
    }

    public async Task HeaderSearch()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");


            var cariAramaObj = new CariKartDto();
            cariAramaObj.Adi = header.SearchText;

            var request = new CariKartRequestDto();
            request.CariKart = cariAramaObj;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostGetServiceResponseAsync<List<CariKartDto>, CariKartRequestDto>(UrlHelper.CariKartAra, request);
            cariler = result;

            if (cariler == null || cariler.Count == 0)
            {
                await ModalManager.ShowMessageAsync("Arama", string.Format("{0} için sonuç bulunamadı", cariAramaObj.Adi));
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task LoadCariler()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            cariler = await httpClient.GetServiceResponseAsync<List<CariKartDto>>(UrlHelper.CariKartListesi + "?firmaId=" + selectedFirmaDonem.firma_no.Value);
            cariler = cariler.OrderByDescending(i => i.Insdate).ToList();
        }
        catch (Exception)
        {
            throw;
        }
    }

    public void CariKartGuncelle(int logref)
    {
        navigation.NavigateTo("/r_carilistef_guncelle/" + logref);
    }

    public void CreateCariKart()
    {
        navigation.NavigateTo("/r_carilistef_ekle");
    }

}
