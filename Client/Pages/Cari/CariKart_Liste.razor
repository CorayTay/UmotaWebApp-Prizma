@page "/r_carilistef"

<HeaderSearchBar header="header" onAddNewButtonClicked="CreateCariKart" onDoneButtonClicked="HeaderSearch"
                 ShowButtons="true"
                 ShowSearchSection="true"></HeaderSearchBar>

<MudDataGrid MultiSelection="true" Items="@cariler" Dense="true" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cari Kartlar</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Cari Kart Ara" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="CariKartDto" Field="Adi" Title="Kod" Sortable="false" Filterable="false" />
        <Column T="CariKartDto" Field="Kodu" SortBy="@_sortBy" />
        <Column T="CariKartDto" Field="Adi2" Title="Adı 2" />
        <Column T="CariKartDto" Field="Adres1" Title="Adres 1" />
        <Column T="CariKartDto" Field="Ilce" Title="İlçe" />
        <Column T="CariKartDto" Field="Il" Title="Şehir" />
        <Column T="CariKartDto" Field="Ulke" Title="Ülke" />
        <Column T="CariKartDto" Field="Tel1" Title="Telefon" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CariKartDto" />
    </PagerContent>
</MudDataGrid>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    public List<CariKartDto> cariler = new List<CariKartDto>();
    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<CariKartDto, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Adi.Length;
        else
            return x.Adi;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<CariKartDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Adi.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Kodu.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Adi} {x.Adi2} {x.Kodu} {x.Ozelkod} {x.Ozelkod2} {x.Il} {x.Ilce} {x.Ulke} {x.Adres1}".Contains(_searchString,  StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Cari Kartlar";
        await LoadCariler();
    }

    public async Task HeaderSearch()
    {
        var cariAramaObj = new CariKartDto();
        cariAramaObj.Adi = header.SearchText;

        var result = await httpClient.PostGetServiceResponseAsync<List<CariKartDto>, CariKartDto>("/api/carikart/search", cariAramaObj);
        cariler = result;

        if (cariler == null || cariler.Count == 0)
        {
            await ModalManager.ShowMessageAsync("Arama", string.Format("{0} için sonuç bulunamadı",cariAramaObj.Adi));
        }
    }

    private async Task LoadCariler()
    {
        cariler = await httpClient.GetServiceResponseAsync<List<CariKartDto>>("/api/carikart/list");
        cariler = cariler.OrderByDescending(i => i.Insdate).ToList();
    }

    public void CariKartGuncelle(string kod)
    {
        navigation.NavigateTo("/r_carilistef_guncelle/" + kod);
    }

    public void CreateCariKart()
    {
        ModalManager.ModalService.Show<CariKartEkle>();
    }

}
