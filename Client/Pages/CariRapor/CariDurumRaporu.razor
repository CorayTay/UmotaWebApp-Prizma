@page "/r_caridurumf"

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="true"
                 onFilterButtonClicked="Rapor" ShowSearchSection="false"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

@if (sayfayiGormeYetkisi == false)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Bu sayfayı görüntüleme yetkiniz yok</MudAlert>
}

<MudTable Items="@items" FixedHeader="true" Height="500px" RowsPerPage="100" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<CariDurumRaporuDto,bool>(FilterFunc1)">
    <HeaderContent>
        <MudTh>Cari Grup</MudTh>
        <MudTh>Özel Kod3</MudTh>
        <MudTh>Özel Kod3 Açıklama</MudTh>
        <MudTh>Cari Kodu</MudTh>
        <MudTh>Cari Adı</MudTh>
        <MudTh>Bakiye</MudTh>
        <MudTh>Ortalama Vade</MudTh>
        <MudTh>Ortlama Gün</MudTh>
        <MudTh>Son Fatura Tutarı</MudTh>
        <MudTh>Son Fatura Tarihi</MudTh>
        <MudTh>Kaç gün geçmiş</MudTh>
        <MudTh>Batak</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Cari Grup">@context.carigrup</MudTd>
        <MudTd DataLabel="Özel Kod3">@context.specode3</MudTd>
        <MudTd DataLabel="Özel Kod3 Açıklama">@context.specode3adi</MudTd>
        <MudTd DataLabel="Cari Kodu">@context.carikodu</MudTd>
        <MudTd DataLabel="Cari Adı">@context.cariadi</MudTd>
        <MudTd DataLabel="Bakiye" Style="text-align:right">@context.bakiyeFormatted</MudTd>
        <MudTd DataLabel="Ortlama Vade">@context.ortalamavadeFormatted</MudTd>
        <MudTd DataLabel="Ortlama Gün">@context.ortalamagun</MudTd>
        <MudTd DataLabel="Son Fatura Tutarı" Style="text-align:right">@context.sonfattutarFormatted</MudTd>
        <MudTd DataLabel="Son Fatura Tarihi">@context.sonfattarFormatted</MudTd>
        <MudTd DataLabel="Kaç gün geçmiş">@context.kacgungecmis</MudTd>
        <MudTd DataLabel="Batak">@context.specode4</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code
{
    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [CascadingParameter] IModalService modal { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    public List<CariDurumRaporuDto> items = new List<CariDurumRaporuDto>();

    private string _searchString;
    private bool _sortNameByLength;
    private bool loadingCompleted = true;
    private bool sayfayiGormeYetkisi = true;
    private bool isAdmin = true;

    private bool FilterFunc1(CariDurumRaporuDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(CariDurumRaporuDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.cariadi != null && element.cariadi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.carikodu != null && element.carikodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.specode3 != null && element.specode3.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.specode3adi != null && element.specode3adi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.specode4 != null && element.specode4.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Cari Durum Raporu";
        await KullaniciYetkileriGetir();

        await Rapor();
    }

    public async Task Rapor()
    {
        if (!sayfayiGormeYetkisi)
            return;

        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var opt = new ModalOptions();
            opt.ContentScrollable = true;


            var filterForm = modal.Show<Pages.CariRapor.CariDurumRaporuFilters>("Rapor Seçenekleri", opt);
            var result = await filterForm.Result;

            if (!result.Cancelled)
            {
                if (result.Data != null)
                {
                    loadingCompleted = false;
                    this.StateHasChanged();

                    var request = (CariDurumRaporuRequestDto)result.Data;

                    request.LogoFirmaNo = selectedFirmaDonem.logo_firma.Value;
                    request.LogoDonemNo = selectedFirmaDonem.logo_donem.Value;
                    if (!string.IsNullOrWhiteSpace(header.SearchText))
                        request.SearchText = '%' + header.SearchText + '%';
                    if (!string.IsNullOrWhiteSpace(request.CariAdi))
                        request.CariAdi = '%' + request.CariAdi + '%';

                    var response = await httpClient.PostGetServiceResponseAsync<List<CariDurumRaporuDto>, CariDurumRaporuRequestDto>(UrlHelper.CariDurumRaporu, request);
                    if (response == null || response.Count == 0)
                    {
                        Snackbar.Add("Aradığınız kritere göre kayıt bulunamadı.", severity: Severity.Warning);
                        loadingCompleted = true;
                        return;
                    }
                    loadingCompleted = true;
                    items = response;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Beklenmedik bir hata oluştu. Hata Mesajı:" + ex.Message, severity: Severity.Error);
        }
    }

    public async Task KullaniciYetkileriGetir()
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.GetServiceResponseAsync<SisKullaniciDto>(UrlHelper.KullaniciGetByKod + "?kod=" + kullanicikodu);

            if (result != null)
            {
                isAdmin = result.KullaniciYetkiKodu.Equals("ADM");
                if (isAdmin)
                {
                    sayfayiGormeYetkisi = true;
                }
                else
                {
                    var yetki = await httpClient.GetServiceResponseAsync<int>(UrlHelper.KullaniciMenuYetkisi + "?kullanicikodu=" + kullanicikodu + "&menu_dfm=r_caridurumf&hak_tipi=sel");
                    sayfayiGormeYetkisi = yetki == 1;
                }
            }
            else
            {
                isAdmin = false;
                sayfayiGormeYetkisi = false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }
}
