@page "/talepfisdetay_liste/{talepRef:int}"
@using System
@using System.IO

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<MudTable Items="talepfis" Hover="true" Breakpoint="Breakpoint.Sm" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh>Proje Adı</MudTh>
        <MudTh>Talep Türü</MudTh>
        <MudTh>Talep No</MudTh>
        <MudTh>Talep Tarihi</MudTh>
        <MudTh>Teslim Tarihi</MudTh>
        <MudTh>Durum</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Proje Adı">@context.ProjeAdi</MudTd>
        <MudTd DataLabel="Talep Türü">@context.TurAdi</MudTd>
        <MudTd DataLabel="Talep No">@context.FisNo</MudTd>
        <MudTd DataLabel="Talep Tarihi">@context.Tarih.Value.ToString("dd.MM.yyyy")</MudTd>
        <MudTd DataLabel="Teslim Tarihi">@context.TeslimTarihi.Value.ToString("dd.MM.yyyy")</MudTd>
        <MudTd DataLabel="Durum">@context.DurumAdi</MudTd>
    </RowTemplate>
</MudTable>

<MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true"
         ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
    <MudTabPanel Text="Talep Detayları">
        <MudTable Items="talepDetays" Hover="true" Breakpoint="Breakpoint.Sm" Bordered="true" Striped="true">

            <ToolBarContent>
                @if (menuYetkiDto.Insert)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="YeniTalepDetay" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Title="Yeni Kayıt Ekle" />
                } &nbsp;
            </ToolBarContent>

            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Aktivite 1</MudTh>
                <MudTh>Aktivite 2</MudTh>
                <MudTh>Aktivite 3</MudTh>
                <MudTh>Kaynak Kodu</MudTh>
                <MudTh>Kaynak Adı</MudTh>
                <MudTh>Marka</MudTh>
                <MudTh>Teknik Özellikler / Notlar</MudTh>
                <MudTh>Miktar</MudTh>
                <MudTh>Birim</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary">
                        <MudMenuItem OnClick="(() => TaleDetayGuncelle(context.Logref))">Güncelle</MudMenuItem>
                    </MudMenu>
                </MudTd>
                <MudTd DataLabel="Aktivite 1">@context.Aktivite1adi</MudTd>
                <MudTd DataLabel="Aktivite 2">@context.Aktivite2adi</MudTd>
                <MudTd DataLabel="Aktivite 3">@context.Aktivite3adi</MudTd>
                <MudTd DataLabel="Kaynak Kodu">@context.Kaynakkodu</MudTd>
                <MudTd DataLabel="Kaynak Adı">@context.Kaynakadi</MudTd>
                <MudTd DataLabel="Marka">@context.Marka</MudTd>
                <MudTd DataLabel="Teknik Özellikler / Notlar">@context.Aciklama</MudTd>
                <MudTd DataLabel="Miktar">@context.Miktar</MudTd>
                <MudTd DataLabel="Birim">@context.Birimadi</MudTd>
            </RowTemplate>

        </MudTable>

    </MudTabPanel>
    <MudTabPanel Text="Onay Durumları">

        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton>Onay</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                <MudMenuItem OnClick="() => OnayaGonder()">Onaya Gönder</MudMenuItem>
                <MudMenuItem OnClick="() => Onayla()">Onayla</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>

        <MudTable Items="talepOnays" Hover="true" Breakpoint="Breakpoint.Sm" Bordered="true" Striped="true">

            <HeaderContent>
                <MudTh>Onay Türü</MudTh>
                <MudTh>Onay Durumu</MudTh>
                <MudTh>Onay Yetkili Kullanıcılar</MudTh>
                <MudTh>İşlemi Yapan</MudTh>
                <MudTh>İşlem Tarihi</MudTh>
                <MudTh>Açıklama</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Onay Türü">@context.OnayTipAdi</MudTd>
                <MudTd DataLabel="Onay Durumu">@context.OnayAdi</MudTd>
                <MudTd DataLabel="Onay Yetkili Kullanıcılar">@context.OnayUser</MudTd>
                <MudTd DataLabel="İşlemi Yapan">@context.upduser</MudTd>
                <MudTd DataLabel="İşlem Tarihi">@context.upddate</MudTd>
                <MudTd DataLabel="Açıklama">@context.Aciklama</MudTd>
            </RowTemplate>

        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Dosyalar">

        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label>File</label>
                    <InputFile OnChange="OnChooseFile" />               
                </div>
                @* Call the SubmitFileAsync in the @onclick event *@
                <button type="submit" class="btn btn-success btn-block m-1" @onclick="SubmitFileAsync">Upload</button>
            </div>
        </div>

    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public int talepRef { get; set; }


    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    YetkiHelper yetkiHelper { get; set; }

    [Inject]
    TalepFisHelper mainDataHelper { get; set; }

    [Inject]
    TalepDetayHelper talepDetayHelper { get; set; }


    [Inject]
    UploadHelper uploadHelper { get; set; }

    public MenuYetkiDto menuYetkiDto = new MenuYetkiDto();
    List<V030_TalepFis> talepfis = new();
    public TalepFisRequestDto talepfisRequest = new();

    private string formName = "talepfisdetay_liste";
    private bool loadingCompleted { get; set; }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Talep Listesi", href: "talepfis_liste"),
    };

    List<V031_TalepDetay> talepDetays = new();
    List<V032_TalepOnay> talepOnays = new();

    private long _uploaded = 0;
    private double _percentage = 0;
    private Stream _fileStream = null;
    private string _selectedFileName = null;
    private string _fileType = "";
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            menuYetkiDto = await yetkiHelper.GetKullaniciMenuYetkisi(this.formName);

            await LoadTalepFis();
            await LoadTalepDetayList();
            await LoadTalepOnayList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task LoadTalepFis()
    {
        if (menuYetkiDto.View == false)
        {
            loadingCompleted = true;
            throw new Exception("Bu sayfayı görme yetkiniz yok");
        }

        talepfisRequest.TalepFis = new TalepFisDto() { logref = this.talepRef };

        talepfis = await mainDataHelper.LoadRecords_ViewV030TalepFis(talepfisRequest);
        _items.Add(new BreadcrumbItem(string.Format("({0}) {1}", talepfis.First().ProjeKodu, talepfis.First().ProjeAdi), href: formName + "/" + talepRef));

        loadingCompleted = true;
    }

    private async Task LoadTalepDetayList()
    {
        var request = new TalepFisDetayRequestDto();
        request.TalepFisDetay = new V031_TalepDetay() { Parlogref = talepfis.First().LogRef };

        talepDetays = await talepDetayHelper.LoadViewRecords(request);
    }

    private async Task LoadTalepOnayList()
    {
        talepOnays = await mainDataHelper.GetTalepFisOnayListAsnyc(talepfis.First().LogRef);
    }

    private void YeniTalepDetay()
    {
        navigation.NavigateTo("/talepdetay_ekle/" + this.talepfis.First().LogRef);
    }

    private void TaleDetayGuncelle(int talepDetayLogRef)
    {
        navigation.NavigateTo("/talepdetay_ekle/" + this.talepfis.First().LogRef + "/" + talepDetayLogRef.ToString());
    }

    private async Task OnayaGonder()
    {
        await mainDataHelper.TalepOnayRota(this.talepRef);
        Snackbar.Add("Onaya Gönderildi", severity: Severity.Success);
    }

    private async Task Onayla()
    {
        await mainDataHelper.TalepDurumGuncelle(this.talepRef);
        Snackbar.Add("Onaylandı", severity: Severity.Success);
    }

    #region Dosya Yükleme

    public void OnChooseFile(InputFileChangeEventArgs e)
    {
        // Get the selected file
        var file = e.File;
        _fileType = e.File.ContentType;
        selectedFile = e.File;

        // Check if the file is null then return from the method
        if (file == null)
            return;

        // Validate the extension if requried (Client-Side)

        // Set the value of the stream by calling OpenReadStream and pass the maximum number of bytes allowed because by default it only allows 512KB
        // I used the value 5000000 which is about 50MB
        using (var stream = file.OpenReadStream(50000000))
        {
            _fileStream = stream;
            _selectedFileName = file.Name;
        }
    }


    public async Task SubmitFileAsync()
    {
        FileDataDto request = new();
        request.FileType = _fileType;

        var buffers = new byte[selectedFile.Size];
        var maxSize = 1024 * 1024 * 8; //8 Mb
        await selectedFile.OpenReadStream(maxAllowedSize: maxSize).ReadAsync(buffers);

        request.Data = buffers;
        request.FileName = _selectedFileName;
        request.FileType = _fileType;

        var response = await uploadHelper.Upload(request);

        TalepDosyaRequestDto request2 = new();
        request2.FileName = response.FileName;
        request2.FileType = response.ImageType;
        request2.TalepLogRef = talepRef;

        var resp2 = await mainDataHelper.UploadTalepDosya(request2);
    }

    #endregion
}
