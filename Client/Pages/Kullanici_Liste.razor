@page "/kullanici_tanimlarif"

<MudDataGrid MultiSelection="true" Items="@kullanicilar" Dense="true" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Kullanıcı/Müşteri Temsilcisi Tanımları</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="SisKullaniciDto" Field="KullaniciKodu" Title="Kod" Sortable="false" Filterable="false" />
        <Column T="SisKullaniciDto" Field="KullaniciAdi" SortBy="@_sortBy" />
        <Column T="SisKullaniciDto" Field="KullaniciYetkiKodu" Title="Yetki Kodu" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="SisKullaniciDto" />
    </PagerContent>
</MudDataGrid>

@code {

    [Inject]
    IModalService modalService { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    public List<SisKullaniciDto> kullanicilar { get; set; }
    private string _searchString;
    private bool _sortNameByLength;


    // custom sort by name length
    private Func<SisKullaniciDto, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.KullaniciAdi.Length;
        else
            return x.KullaniciAdi;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<SisKullaniciDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.KullaniciAdi.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.KullaniciKodu.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.KullaniciAdi} {x.KullaniciKodu} {x.KullaniciYetkiKodu}".Contains(_searchString))
            return true;

        return false;
    };


    private async Task LoadKullanicilar()
    {
        kullanicilar = await httpClient.GetServiceResponseAsync<List<SisKullaniciDto>>("/api/kullanici/list");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadKullanicilar();
    }
}
